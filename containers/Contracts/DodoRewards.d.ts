/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DodoRewardsInterface extends ethers.utils.Interface {
  functions: {
    "_NEW_OWNER_()": FunctionFragment;
    "_OWNER_()": FunctionFragment;
    "_TOKEN_()": FunctionFragment;
    "addRewardToken(address,uint256,uint256,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claimAllRewards()": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "claimReward(uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "getIdByRewardToken(address)": FunctionFragment;
    "getPendingReward(address,uint256)": FunctionFragment;
    "getPendingRewardByToken(address,address)": FunctionFragment;
    "getRewardNum()": FunctionFragment;
    "getRewardTokenById(uint256)": FunctionFragment;
    "init(address,address)": FunctionFragment;
    "initOwner(address)": FunctionFragment;
    "removeRewardToken(address)": FunctionFragment;
    "rewardTokenInfos(uint256)": FunctionFragment;
    "setEndBlock(uint256,uint256)": FunctionFragment;
    "setReward(uint256,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawLeftOver(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_NEW_OWNER_",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_OWNER_", values?: undefined): string;
  encodeFunctionData(functionFragment: "_TOKEN_", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addRewardToken",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimAllRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdByRewardToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewardByToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokenById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "initOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeRewardToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEndBlock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLeftOver",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_NEW_OWNER_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_OWNER_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_TOKEN_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAllRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIdByRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewardByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokenById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLeftOver",
    data: BytesLike
  ): Result;

  events: {
    "Claim(uint256,address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "NewRewardToken(uint256,address)": EventFragment;
    "OwnershipTransferPrepared(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveRewardToken(address)": EventFragment;
    "UpdateEndBlock(uint256,uint256)": EventFragment;
    "UpdateReward(uint256,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
    "WithdrawLeftOver(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRewardToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferPrepared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveRewardToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateEndBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawLeftOver"): EventFragment;
}

export class DodoRewards extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DodoRewardsInterface;

  functions: {
    _NEW_OWNER_(overrides?: CallOverrides): Promise<[string]>;

    "_NEW_OWNER_()"(overrides?: CallOverrides): Promise<[string]>;

    _OWNER_(overrides?: CallOverrides): Promise<[string]>;

    "_OWNER_()"(overrides?: CallOverrides): Promise<[string]>;

    _TOKEN_(overrides?: CallOverrides): Promise<[string]>;

    "_TOKEN_()"(overrides?: CallOverrides): Promise<[string]>;

    addRewardToken(
      rewardToken: string,
      rewardPerBlock: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addRewardToken(address,uint256,uint256,uint256)"(
      rewardToken: string,
      rewardPerBlock: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimAllRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimAllRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      i: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimReward(uint256)"(
      i: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getIdByRewardToken(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getIdByRewardToken(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingReward(
      user: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPendingReward(address,uint256)"(
      user: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingRewardByToken(
      user: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPendingRewardByToken(address,address)"(
      user: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getRewardNum()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardTokenById(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRewardTokenById(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    init(
      owner: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "init(address,address)"(
      owner: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initOwner(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeRewardToken(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeRewardToken(address)"(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardTokenInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardToken: string;
        startBlock: BigNumber;
        endBlock: BigNumber;
        rewardVault: string;
        rewardPerBlock: BigNumber;
        accRewardPerShare: BigNumber;
        lastRewardBlock: BigNumber;
      }
    >;

    "rewardTokenInfos(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardToken: string;
        startBlock: BigNumber;
        endBlock: BigNumber;
        rewardVault: string;
        rewardPerBlock: BigNumber;
        accRewardPerShare: BigNumber;
        lastRewardBlock: BigNumber;
      }
    >;

    setEndBlock(
      i: BigNumberish,
      newEndBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setEndBlock(uint256,uint256)"(
      i: BigNumberish,
      newEndBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReward(
      i: BigNumberish,
      newRewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setReward(uint256,uint256)"(
      i: BigNumberish,
      newRewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLeftOver(
      i: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawLeftOver(uint256,uint256)"(
      i: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _NEW_OWNER_(overrides?: CallOverrides): Promise<string>;

  "_NEW_OWNER_()"(overrides?: CallOverrides): Promise<string>;

  _OWNER_(overrides?: CallOverrides): Promise<string>;

  "_OWNER_()"(overrides?: CallOverrides): Promise<string>;

  _TOKEN_(overrides?: CallOverrides): Promise<string>;

  "_TOKEN_()"(overrides?: CallOverrides): Promise<string>;

  addRewardToken(
    rewardToken: string,
    rewardPerBlock: BigNumberish,
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addRewardToken(address,uint256,uint256,uint256)"(
    rewardToken: string,
    rewardPerBlock: BigNumberish,
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimAllRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimAllRewards()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    i: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimReward(uint256)"(
    i: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getIdByRewardToken(
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getIdByRewardToken(address)"(
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingReward(
    user: string,
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPendingReward(address,uint256)"(
    user: string,
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingRewardByToken(
    user: string,
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPendingRewardByToken(address,address)"(
    user: string,
    rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardNum(overrides?: CallOverrides): Promise<BigNumber>;

  "getRewardNum()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardTokenById(
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRewardTokenById(uint256)"(
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  init(
    owner: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "init(address,address)"(
    owner: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initOwner(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeRewardToken(
    rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeRewardToken(address)"(
    rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardTokenInfos(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
      rewardToken: string;
      startBlock: BigNumber;
      endBlock: BigNumber;
      rewardVault: string;
      rewardPerBlock: BigNumber;
      accRewardPerShare: BigNumber;
      lastRewardBlock: BigNumber;
    }
  >;

  "rewardTokenInfos(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
      rewardToken: string;
      startBlock: BigNumber;
      endBlock: BigNumber;
      rewardVault: string;
      rewardPerBlock: BigNumber;
      accRewardPerShare: BigNumber;
      lastRewardBlock: BigNumber;
    }
  >;

  setEndBlock(
    i: BigNumberish,
    newEndBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setEndBlock(uint256,uint256)"(
    i: BigNumberish,
    newEndBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReward(
    i: BigNumberish,
    newRewardPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setReward(uint256,uint256)"(
    i: BigNumberish,
    newRewardPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLeftOver(
    i: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawLeftOver(uint256,uint256)"(
    i: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _NEW_OWNER_(overrides?: CallOverrides): Promise<string>;

    "_NEW_OWNER_()"(overrides?: CallOverrides): Promise<string>;

    _OWNER_(overrides?: CallOverrides): Promise<string>;

    "_OWNER_()"(overrides?: CallOverrides): Promise<string>;

    _TOKEN_(overrides?: CallOverrides): Promise<string>;

    "_TOKEN_()"(overrides?: CallOverrides): Promise<string>;

    addRewardToken(
      rewardToken: string,
      rewardPerBlock: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addRewardToken(address,uint256,uint256,uint256)"(
      rewardToken: string,
      rewardPerBlock: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAllRewards(overrides?: CallOverrides): Promise<void>;

    "claimAllRewards()"(overrides?: CallOverrides): Promise<void>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    claimReward(i: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "claimReward(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getIdByRewardToken(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIdByRewardToken(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingReward(
      user: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPendingReward(address,uint256)"(
      user: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRewardByToken(
      user: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPendingRewardByToken(address,address)"(
      user: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardNum(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardNum()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokenById(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRewardTokenById(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    init(
      owner: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "init(address,address)"(
      owner: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "initOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRewardToken(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeRewardToken(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardTokenInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardToken: string;
        startBlock: BigNumber;
        endBlock: BigNumber;
        rewardVault: string;
        rewardPerBlock: BigNumber;
        accRewardPerShare: BigNumber;
        lastRewardBlock: BigNumber;
      }
    >;

    "rewardTokenInfos(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardToken: string;
        startBlock: BigNumber;
        endBlock: BigNumber;
        rewardVault: string;
        rewardPerBlock: BigNumber;
        accRewardPerShare: BigNumber;
        lastRewardBlock: BigNumber;
      }
    >;

    setEndBlock(
      i: BigNumberish,
      newEndBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEndBlock(uint256,uint256)"(
      i: BigNumberish,
      newEndBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReward(
      i: BigNumberish,
      newRewardPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setReward(uint256,uint256)"(
      i: BigNumberish,
      newRewardPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLeftOver(
      i: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawLeftOver(uint256,uint256)"(
      i: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Claim(
      i: BigNumberish | null,
      user: string | null,
      reward: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { i: BigNumber; user: string; reward: BigNumber }
    >;

    Deposit(
      user: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    NewRewardToken(
      i: BigNumberish | null,
      rewardToken: null
    ): TypedEventFilter<
      [BigNumber, string],
      { i: BigNumber; rewardToken: string }
    >;

    OwnershipTransferPrepared(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    RemoveRewardToken(
      rewardToken: null
    ): TypedEventFilter<[string], { rewardToken: string }>;

    UpdateEndBlock(
      i: BigNumberish | null,
      endBlock: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { i: BigNumber; endBlock: BigNumber }
    >;

    UpdateReward(
      i: BigNumberish | null,
      rewardPerBlock: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { i: BigNumber; rewardPerBlock: BigNumber }
    >;

    Withdraw(
      user: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    WithdrawLeftOver(
      owner: null,
      i: null
    ): TypedEventFilter<[string, BigNumber], { owner: string; i: BigNumber }>;
  };

  estimateGas: {
    _NEW_OWNER_(overrides?: CallOverrides): Promise<BigNumber>;

    "_NEW_OWNER_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _OWNER_(overrides?: CallOverrides): Promise<BigNumber>;

    "_OWNER_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _TOKEN_(overrides?: CallOverrides): Promise<BigNumber>;

    "_TOKEN_()"(overrides?: CallOverrides): Promise<BigNumber>;

    addRewardToken(
      rewardToken: string,
      rewardPerBlock: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addRewardToken(address,uint256,uint256,uint256)"(
      rewardToken: string,
      rewardPerBlock: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAllRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimAllRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      i: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimReward(uint256)"(
      i: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getIdByRewardToken(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIdByRewardToken(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingReward(
      user: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPendingReward(address,uint256)"(
      user: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRewardByToken(
      user: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPendingRewardByToken(address,address)"(
      user: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardNum(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardNum()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokenById(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRewardTokenById(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      owner: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "init(address,address)"(
      owner: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initOwner(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeRewardToken(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeRewardToken(address)"(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardTokenInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardTokenInfos(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setEndBlock(
      i: BigNumberish,
      newEndBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setEndBlock(uint256,uint256)"(
      i: BigNumberish,
      newEndBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReward(
      i: BigNumberish,
      newRewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setReward(uint256,uint256)"(
      i: BigNumberish,
      newRewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLeftOver(
      i: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawLeftOver(uint256,uint256)"(
      i: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _NEW_OWNER_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_NEW_OWNER_()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _OWNER_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_OWNER_()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _TOKEN_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_TOKEN_()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRewardToken(
      rewardToken: string,
      rewardPerBlock: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addRewardToken(address,uint256,uint256,uint256)"(
      rewardToken: string,
      rewardPerBlock: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimAllRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimAllRewards()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      i: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimReward(uint256)"(
      i: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getIdByRewardToken(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIdByRewardToken(address)"(
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingReward(
      user: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPendingReward(address,uint256)"(
      user: string,
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingRewardByToken(
      user: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPendingRewardByToken(address,address)"(
      user: string,
      rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRewardNum()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardTokenById(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRewardTokenById(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      owner: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "init(address,address)"(
      owner: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initOwner(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeRewardToken(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeRewardToken(address)"(
      rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardTokenInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardTokenInfos(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setEndBlock(
      i: BigNumberish,
      newEndBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setEndBlock(uint256,uint256)"(
      i: BigNumberish,
      newEndBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReward(
      i: BigNumberish,
      newRewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setReward(uint256,uint256)"(
      i: BigNumberish,
      newRewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLeftOver(
      i: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawLeftOver(uint256,uint256)"(
      i: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
