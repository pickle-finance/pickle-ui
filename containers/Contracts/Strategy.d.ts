/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StrategyInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf()": FunctionFragment;
    "balanceOfPool()": FunctionFragment;
    "balanceOfWant()": FunctionFragment;
    "brine()": FunctionFragment;
    "burn()": FunctionFragment;
    "burnFee()": FunctionFragment;
    "burnMax()": FunctionFragment;
    "controller()": FunctionFragment;
    "dai()": FunctionFragment;
    "deposit()": FunctionFragment;
    "execute(address,bytes)": FunctionFragment;
    "freeWithdraw(uint256)": FunctionFragment;
    "getHarvestable()": FunctionFragment;
    "getName()": FunctionFragment;
    "governance()": FunctionFragment;
    "harvest()": FunctionFragment;
    "keepUNI()": FunctionFragment;
    "keepUNIMax()": FunctionFragment;
    "performanceFee()": FunctionFragment;
    "performanceMax()": FunctionFragment;
    "pickle()": FunctionFragment;
    "rewards()": FunctionFragment;
    "setBurnFee(uint256)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setKeepUNI(uint256)": FunctionFragment;
    "setPerformanceFee(uint256)": FunctionFragment;
    "setStrategist(address)": FunctionFragment;
    "setTimelock(address)": FunctionFragment;
    "setWithdrawalFee(uint256)": FunctionFragment;
    "strategist()": FunctionFragment;
    "timelock()": FunctionFragment;
    "uni()": FunctionFragment;
    "univ2Router2()": FunctionFragment;
    "want()": FunctionFragment;
    "weth()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
    "withdrawalFee()": FunctionFragment;
    "withdrawalMax()": FunctionFragment;
    "getCurrentLeverage()": FunctionFragment;
    "masterChef()": FunctionFragment;
    "ironchef()": FunctionFragment;
    "poolId()": FunctionFragment;
    "rewardToken()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOfPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfWant",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "brine", values?: undefined): string;
  encodeFunctionData(functionFragment: "burn", values?: undefined): string;
  encodeFunctionData(functionFragment: "burnFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "burnMax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dai", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "freeWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHarvestable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(functionFragment: "keepUNI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "keepUNIMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performanceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performanceMax",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pickle", values?: undefined): string;
  encodeFunctionData(functionFragment: "rewards", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBurnFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeepUNI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerformanceFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategist",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setTimelock", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategist",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(functionFragment: "uni", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "univ2Router2",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "want", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentLeverage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "masterChef",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ironchef", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfWant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "brine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnMax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freeWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHarvestable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keepUNI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keepUNIMax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "performanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pickle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBurnFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeepUNI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uni", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "univ2Router2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "want", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "masterChef", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ironchef", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;

  events: {};
}

export class Strategy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StrategyInterface;

  functions: {
    balanceOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOfPool()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfWant(overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    brine(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "brine()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burn(overrides?: CallOverrides): Promise<[string]>;

    "burn()"(overrides?: CallOverrides): Promise<[string]>;

    burnFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "burnFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    burnMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    "burnMax()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    "controller()"(overrides?: CallOverrides): Promise<[string]>;

    dai(overrides?: CallOverrides): Promise<[string]>;

    "dai()"(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "execute(address,bytes)"(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freeWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "freeWithdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getHarvestable(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getHarvestable()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    "getName()"(overrides?: CallOverrides): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    "governance()"(overrides?: CallOverrides): Promise<[string]>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    keepUNI(overrides?: CallOverrides): Promise<[BigNumber]>;

    "keepUNI()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    keepUNIMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    "keepUNIMax()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    performanceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "performanceFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    performanceMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    "performanceMax()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pickle(overrides?: CallOverrides): Promise<[string]>;

    "pickle()"(overrides?: CallOverrides): Promise<[string]>;

    rewards(overrides?: CallOverrides): Promise<[string]>;

    "rewards()"(overrides?: CallOverrides): Promise<[string]>;

    setBurnFee(
      _burnFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setBurnFee(uint256)"(
      _burnFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeepUNI(
      _keepUNI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setKeepUNI(uint256)"(
      _keepUNI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerformanceFee(
      _performanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPerformanceFee(uint256)"(
      _performanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTimelock(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalFee(
      _withdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setWithdrawalFee(uint256)"(
      _withdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategist(overrides?: CallOverrides): Promise<[string]>;

    "strategist()"(overrides?: CallOverrides): Promise<[string]>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    "timelock()"(overrides?: CallOverrides): Promise<[string]>;

    uni(overrides?: CallOverrides): Promise<[string]>;

    "uni()"(overrides?: CallOverrides): Promise<[string]>;

    univ2Router2(overrides?: CallOverrides): Promise<[string]>;

    "univ2Router2()"(overrides?: CallOverrides): Promise<[string]>;

    want(overrides?: CallOverrides): Promise<[string]>;

    "want()"(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    "weth()"(overrides?: CallOverrides): Promise<[string]>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(address)"(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawAll()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "withdrawalFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    "withdrawalMax()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentLeverage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getCurrentLeverage()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    masterChef(overrides?: CallOverrides): Promise<[string]>;

    "masterChef()"(overrides?: CallOverrides): Promise<[string]>;

    ironchef(overrides?: CallOverrides): Promise<[string]>;

    "ironchef()"(overrides?: CallOverrides): Promise<[string]>;

    poolId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "poolId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    "rewardToken()"(overrides?: CallOverrides): Promise<[string]>;
  };

  balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOfPool()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOfWant()"(overrides?: CallOverrides): Promise<BigNumber>;

  brine(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "brine()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burn(overrides?: CallOverrides): Promise<string>;

  "burn()"(overrides?: CallOverrides): Promise<string>;

  burnFee(overrides?: CallOverrides): Promise<BigNumber>;

  "burnFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  burnMax(overrides?: CallOverrides): Promise<BigNumber>;

  "burnMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  dai(overrides?: CallOverrides): Promise<string>;

  "dai()"(overrides?: CallOverrides): Promise<string>;

  deposit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    _target: string,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "execute(address,bytes)"(
    _target: string,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freeWithdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "freeWithdraw(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getHarvestable(overrides?: CallOverrides): Promise<BigNumber>;

  "getHarvestable()"(overrides?: CallOverrides): Promise<BigNumber>;

  getName(overrides?: CallOverrides): Promise<string>;

  "getName()"(overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  harvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvest()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  keepUNI(overrides?: CallOverrides): Promise<BigNumber>;

  "keepUNI()"(overrides?: CallOverrides): Promise<BigNumber>;

  keepUNIMax(overrides?: CallOverrides): Promise<BigNumber>;

  "keepUNIMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

  "performanceFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  performanceMax(overrides?: CallOverrides): Promise<BigNumber>;

  "performanceMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  pickle(overrides?: CallOverrides): Promise<string>;

  "pickle()"(overrides?: CallOverrides): Promise<string>;

  rewards(overrides?: CallOverrides): Promise<string>;

  "rewards()"(overrides?: CallOverrides): Promise<string>;

  setBurnFee(
    _burnFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setBurnFee(uint256)"(
    _burnFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setController(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setController(address)"(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGovernance(address)"(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeepUNI(
    _keepUNI: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setKeepUNI(uint256)"(
    _keepUNI: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerformanceFee(
    _performanceFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPerformanceFee(uint256)"(
    _performanceFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrategist(
    _strategist: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setStrategist(address)"(
    _strategist: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTimelock(
    _timelock: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTimelock(address)"(
    _timelock: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalFee(
    _withdrawalFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setWithdrawalFee(uint256)"(
    _withdrawalFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategist(overrides?: CallOverrides): Promise<string>;

  "strategist()"(overrides?: CallOverrides): Promise<string>;

  timelock(overrides?: CallOverrides): Promise<string>;

  "timelock()"(overrides?: CallOverrides): Promise<string>;

  uni(overrides?: CallOverrides): Promise<string>;

  "uni()"(overrides?: CallOverrides): Promise<string>;

  univ2Router2(overrides?: CallOverrides): Promise<string>;

  "univ2Router2()"(overrides?: CallOverrides): Promise<string>;

  want(overrides?: CallOverrides): Promise<string>;

  "want()"(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  "withdraw(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(address)"(
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawAll()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

  "withdrawalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalMax(overrides?: CallOverrides): Promise<BigNumber>;

  "withdrawalMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentLeverage(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getCurrentLeverage()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  masterChef(overrides?: CallOverrides): Promise<string>;

  "masterChef()"(overrides?: CallOverrides): Promise<string>;

  ironchef(overrides?: CallOverrides): Promise<string>;

  "ironchef()"(overrides?: CallOverrides): Promise<string>;

  poolId(overrides?: CallOverrides): Promise<BigNumber>;

  "poolId()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  "rewardToken()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<BigNumber>;

    brine(overrides?: CallOverrides): Promise<void>;

    "brine()"(overrides?: CallOverrides): Promise<void>;

    burn(overrides?: CallOverrides): Promise<string>;

    "burn()"(overrides?: CallOverrides): Promise<string>;

    burnFee(overrides?: CallOverrides): Promise<BigNumber>;

    "burnFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    burnMax(overrides?: CallOverrides): Promise<BigNumber>;

    "burnMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    dai(overrides?: CallOverrides): Promise<string>;

    "dai()"(overrides?: CallOverrides): Promise<string>;

    deposit(overrides?: CallOverrides): Promise<void>;

    "deposit()"(overrides?: CallOverrides): Promise<void>;

    execute(
      _target: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "execute(address,bytes)"(
      _target: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    freeWithdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "freeWithdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getHarvestable(overrides?: CallOverrides): Promise<BigNumber>;

    "getHarvestable()"(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<string>;

    "getName()"(overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    harvest(overrides?: CallOverrides): Promise<void>;

    "harvest()"(overrides?: CallOverrides): Promise<void>;

    keepUNI(overrides?: CallOverrides): Promise<BigNumber>;

    "keepUNI()"(overrides?: CallOverrides): Promise<BigNumber>;

    keepUNIMax(overrides?: CallOverrides): Promise<BigNumber>;

    "keepUNIMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    performanceMax(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    pickle(overrides?: CallOverrides): Promise<string>;

    "pickle()"(overrides?: CallOverrides): Promise<string>;

    rewards(overrides?: CallOverrides): Promise<string>;

    "rewards()"(overrides?: CallOverrides): Promise<string>;

    setBurnFee(
      _burnFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBurnFee(uint256)"(
      _burnFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setController(address)"(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeepUNI(
      _keepUNI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setKeepUNI(uint256)"(
      _keepUNI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerformanceFee(
      _performanceFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPerformanceFee(uint256)"(
      _performanceFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategist(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimelock(_timelock: string, overrides?: CallOverrides): Promise<void>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalFee(
      _withdrawalFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWithdrawalFee(uint256)"(
      _withdrawalFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    strategist(overrides?: CallOverrides): Promise<string>;

    "strategist()"(overrides?: CallOverrides): Promise<string>;

    timelock(overrides?: CallOverrides): Promise<string>;

    "timelock()"(overrides?: CallOverrides): Promise<string>;

    uni(overrides?: CallOverrides): Promise<string>;

    "uni()"(overrides?: CallOverrides): Promise<string>;

    univ2Router2(overrides?: CallOverrides): Promise<string>;

    "univ2Router2()"(overrides?: CallOverrides): Promise<string>;

    want(overrides?: CallOverrides): Promise<string>;

    "want()"(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAll(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawAll()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalMax(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentLeverage()"(overrides?: CallOverrides): Promise<BigNumber>;

    masterChef(overrides?: CallOverrides): Promise<string>;

    "masterChef()"(overrides?: CallOverrides): Promise<string>;

    ironchef(overrides?: CallOverrides): Promise<string>;

    "ironchef()"(overrides?: CallOverrides): Promise<string>;

    poolId(overrides?: CallOverrides): Promise<BigNumber>;

    "poolId()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    "rewardToken()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<BigNumber>;

    brine(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "brine()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burn(overrides?: CallOverrides): Promise<BigNumber>;

    "burn()"(overrides?: CallOverrides): Promise<BigNumber>;

    burnFee(overrides?: CallOverrides): Promise<BigNumber>;

    "burnFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    burnMax(overrides?: CallOverrides): Promise<BigNumber>;

    "burnMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<BigNumber>;

    "dai()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "execute(address,bytes)"(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freeWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "freeWithdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getHarvestable(overrides?: CallOverrides): Promise<BigNumber>;

    "getHarvestable()"(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    "getName()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    keepUNI(overrides?: CallOverrides): Promise<BigNumber>;

    "keepUNI()"(overrides?: CallOverrides): Promise<BigNumber>;

    keepUNIMax(overrides?: CallOverrides): Promise<BigNumber>;

    "keepUNIMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    performanceFee(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    performanceMax(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    pickle(overrides?: CallOverrides): Promise<BigNumber>;

    "pickle()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    "rewards()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBurnFee(
      _burnFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setBurnFee(uint256)"(
      _burnFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeepUNI(
      _keepUNI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setKeepUNI(uint256)"(
      _keepUNI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerformanceFee(
      _performanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPerformanceFee(uint256)"(
      _performanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTimelock(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawalFee(
      _withdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setWithdrawalFee(uint256)"(
      _withdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategist(overrides?: CallOverrides): Promise<BigNumber>;

    "strategist()"(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    "timelock()"(overrides?: CallOverrides): Promise<BigNumber>;

    uni(overrides?: CallOverrides): Promise<BigNumber>;

    "uni()"(overrides?: CallOverrides): Promise<BigNumber>;

    univ2Router2(overrides?: CallOverrides): Promise<BigNumber>;

    "univ2Router2()"(overrides?: CallOverrides): Promise<BigNumber>;

    want(overrides?: CallOverrides): Promise<BigNumber>;

    "want()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(address)"(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawAll()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalFee(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalMax(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentLeverage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getCurrentLeverage()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    masterChef(overrides?: CallOverrides): Promise<BigNumber>;

    "masterChef()"(overrides?: CallOverrides): Promise<BigNumber>;

    ironchef(overrides?: CallOverrides): Promise<BigNumber>;

    "ironchef()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolId(overrides?: CallOverrides): Promise<BigNumber>;

    "poolId()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardToken()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceOf()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceOfPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfWant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    brine(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "brine()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "burn()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "burnFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "burnMax()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dai()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "execute(address,bytes)"(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freeWithdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "freeWithdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getHarvestable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getHarvestable()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    keepUNI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "keepUNI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keepUNIMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "keepUNIMax()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    performanceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "performanceFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performanceMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "performanceMax()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pickle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pickle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewards()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBurnFee(
      _burnFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setBurnFee(uint256)"(
      _burnFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeepUNI(
      _keepUNI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setKeepUNI(uint256)"(
      _keepUNI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerformanceFee(
      _performanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPerformanceFee(uint256)"(
      _performanceFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTimelock(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalFee(
      _withdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setWithdrawalFee(uint256)"(
      _withdrawalFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strategist()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timelock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uni(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uni()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    univ2Router2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "univ2Router2()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    want(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "want()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(address)"(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawAll()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "withdrawalFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "withdrawalMax()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentLeverage(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getCurrentLeverage()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    masterChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "masterChef()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ironchef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ironchef()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
