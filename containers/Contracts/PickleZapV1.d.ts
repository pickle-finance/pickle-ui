/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PickleZapV1Interface extends ethers.utils.Interface {
  functions: {
    "ZapIn(address,uint256,address,address,uint256,address,bytes,bool,address,bool)": FunctionFragment;
    "approvedTargets(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setApprovedTargets(address[],bool[])": FunctionFragment;
    "stopped()": FunctionFragment;
    "toggleContractActive()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wethTokenAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ZapIn",
    values: [
      string,
      BigNumberish,
      string,
      string,
      BigNumberish,
      string,
      BytesLike,
      boolean,
      string,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedTargets",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovedTargets",
    values: [string[], boolean[]]
  ): string;
  encodeFunctionData(functionFragment: "stopped", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleContractActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "wethTokenAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ZapIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approvedTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovedTargets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleContractActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wethTokenAddress",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "zapIn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "zapIn"): EventFragment;
}

export class PickleZapV1 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PickleZapV1Interface;

  functions: {
    ZapIn(
      _FromTokenContractAddress: string,
      _amount: BigNumberish,
      _pairAddress: string,
      _toPJar: string,
      _minPJarTokens: BigNumberish,
      _swapTarget: string,
      _swapData: BytesLike,
      _transferResidual: boolean,
      _uniswapRouter: string,
      _shouldSellEntireBalance: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "ZapIn(address,uint256,address,address,uint256,address,bytes,bool,address,bool)"(
      _FromTokenContractAddress: string,
      _amount: BigNumberish,
      _pairAddress: string,
      _toPJar: string,
      _minPJarTokens: BigNumberish,
      _swapTarget: string,
      _swapData: BytesLike,
      _transferResidual: boolean,
      _uniswapRouter: string,
      _shouldSellEntireBalance: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvedTargets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "approvedTargets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovedTargets(
      targets: string[],
      isApproved: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setApprovedTargets(address[],bool[])"(
      targets: string[],
      isApproved: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopped(overrides?: CallOverrides): Promise<[boolean]>;

    "stopped()"(overrides?: CallOverrides): Promise<[boolean]>;

    toggleContractActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toggleContractActive()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wethTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    "wethTokenAddress()"(overrides?: CallOverrides): Promise<[string]>;
  };

  ZapIn(
    _FromTokenContractAddress: string,
    _amount: BigNumberish,
    _pairAddress: string,
    _toPJar: string,
    _minPJarTokens: BigNumberish,
    _swapTarget: string,
    _swapData: BytesLike,
    _transferResidual: boolean,
    _uniswapRouter: string,
    _shouldSellEntireBalance: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "ZapIn(address,uint256,address,address,uint256,address,bytes,bool,address,bool)"(
    _FromTokenContractAddress: string,
    _amount: BigNumberish,
    _pairAddress: string,
    _toPJar: string,
    _minPJarTokens: BigNumberish,
    _swapTarget: string,
    _swapData: BytesLike,
    _transferResidual: boolean,
    _uniswapRouter: string,
    _shouldSellEntireBalance: boolean,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvedTargets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "approvedTargets(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovedTargets(
    targets: string[],
    isApproved: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setApprovedTargets(address[],bool[])"(
    targets: string[],
    isApproved: boolean[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopped(overrides?: CallOverrides): Promise<boolean>;

  "stopped()"(overrides?: CallOverrides): Promise<boolean>;

  toggleContractActive(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toggleContractActive()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wethTokenAddress(overrides?: CallOverrides): Promise<string>;

  "wethTokenAddress()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ZapIn(
      _FromTokenContractAddress: string,
      _amount: BigNumberish,
      _pairAddress: string,
      _toPJar: string,
      _minPJarTokens: BigNumberish,
      _swapTarget: string,
      _swapData: BytesLike,
      _transferResidual: boolean,
      _uniswapRouter: string,
      _shouldSellEntireBalance: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ZapIn(address,uint256,address,address,uint256,address,bytes,bool,address,bool)"(
      _FromTokenContractAddress: string,
      _amount: BigNumberish,
      _pairAddress: string,
      _toPJar: string,
      _minPJarTokens: BigNumberish,
      _swapTarget: string,
      _swapData: BytesLike,
      _transferResidual: boolean,
      _uniswapRouter: string,
      _shouldSellEntireBalance: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approvedTargets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "approvedTargets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setApprovedTargets(
      targets: string[],
      isApproved: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovedTargets(address[],bool[])"(
      targets: string[],
      isApproved: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    stopped(overrides?: CallOverrides): Promise<boolean>;

    "stopped()"(overrides?: CallOverrides): Promise<boolean>;

    toggleContractActive(overrides?: CallOverrides): Promise<void>;

    "toggleContractActive()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wethTokenAddress(overrides?: CallOverrides): Promise<string>;

    "wethTokenAddress()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    zapIn(
      sender: null,
      jar: null,
      tokensRec: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { sender: string; jar: string; tokensRec: BigNumber }
    >;
  };

  estimateGas: {
    ZapIn(
      _FromTokenContractAddress: string,
      _amount: BigNumberish,
      _pairAddress: string,
      _toPJar: string,
      _minPJarTokens: BigNumberish,
      _swapTarget: string,
      _swapData: BytesLike,
      _transferResidual: boolean,
      _uniswapRouter: string,
      _shouldSellEntireBalance: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "ZapIn(address,uint256,address,address,uint256,address,bytes,bool,address,bool)"(
      _FromTokenContractAddress: string,
      _amount: BigNumberish,
      _pairAddress: string,
      _toPJar: string,
      _minPJarTokens: BigNumberish,
      _swapTarget: string,
      _swapData: BytesLike,
      _transferResidual: boolean,
      _uniswapRouter: string,
      _shouldSellEntireBalance: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvedTargets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approvedTargets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovedTargets(
      targets: string[],
      isApproved: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setApprovedTargets(address[],bool[])"(
      targets: string[],
      isApproved: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopped(overrides?: CallOverrides): Promise<BigNumber>;

    "stopped()"(overrides?: CallOverrides): Promise<BigNumber>;

    toggleContractActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toggleContractActive()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wethTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "wethTokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ZapIn(
      _FromTokenContractAddress: string,
      _amount: BigNumberish,
      _pairAddress: string,
      _toPJar: string,
      _minPJarTokens: BigNumberish,
      _swapTarget: string,
      _swapData: BytesLike,
      _transferResidual: boolean,
      _uniswapRouter: string,
      _shouldSellEntireBalance: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "ZapIn(address,uint256,address,address,uint256,address,bytes,bool,address,bool)"(
      _FromTokenContractAddress: string,
      _amount: BigNumberish,
      _pairAddress: string,
      _toPJar: string,
      _minPJarTokens: BigNumberish,
      _swapTarget: string,
      _swapData: BytesLike,
      _transferResidual: boolean,
      _uniswapRouter: string,
      _shouldSellEntireBalance: boolean,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvedTargets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approvedTargets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovedTargets(
      targets: string[],
      isApproved: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setApprovedTargets(address[],bool[])"(
      targets: string[],
      isApproved: boolean[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stopped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toggleContractActive(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toggleContractActive()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wethTokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wethTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
