/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface YvecrvZapInterface extends ethers.utils.Interface {
  functions: {
    "activeDex()": FunctionFragment;
    "crv()": FunctionFragment;
    "ethYveCrv()": FunctionFragment;
    "governance()": FunctionFragment;
    "owner()": FunctionFragment;
    "pickleJar()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setActiveDex(uint256)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "sushiswapPair()": FunctionFragment;
    "sushiswapRouter()": FunctionFragment;
    "swapCrvPath(uint256)": FunctionFragment;
    "swapEthPath(uint256)": FunctionFragment;
    "swapForYveCrvPath(uint256)": FunctionFragment;
    "swapPair()": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "sweep(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapPair()": FunctionFragment;
    "uniswapRouter()": FunctionFragment;
    "weth()": FunctionFragment;
    "yVault()": FunctionFragment;
    "yveCrv()": FunctionFragment;
    "zapInCRV(uint256)": FunctionFragment;
    "zapInETH()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "activeDex", values?: undefined): string;
  encodeFunctionData(functionFragment: "crv", values?: undefined): string;
  encodeFunctionData(functionFragment: "ethYveCrv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pickleJar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setActiveDex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sushiswapPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sushiswapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapCrvPath",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapEthPath",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapForYveCrvPath",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "swapPair", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sweep", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapPair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(functionFragment: "yVault", values?: undefined): string;
  encodeFunctionData(functionFragment: "yveCrv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "zapInCRV",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "zapInETH", values?: undefined): string;

  decodeFunctionResult(functionFragment: "activeDex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ethYveCrv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pickleJar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setActiveDex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sushiswapPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sushiswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapCrvPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapEthPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapForYveCrvPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yveCrv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapInCRV", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapInETH", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class YvecrvZap extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: YvecrvZapInterface;

  functions: {
    activeDex(overrides?: CallOverrides): Promise<[string]>;

    "activeDex()"(overrides?: CallOverrides): Promise<[string]>;

    crv(overrides?: CallOverrides): Promise<[string]>;

    "crv()"(overrides?: CallOverrides): Promise<[string]>;

    ethYveCrv(overrides?: CallOverrides): Promise<[string]>;

    "ethYveCrv()"(overrides?: CallOverrides): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    "governance()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pickleJar(overrides?: CallOverrides): Promise<[string]>;

    "pickleJar()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setActiveDex(
      exchange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setActiveDex(uint256)"(
      exchange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sushiswapPair(overrides?: CallOverrides): Promise<[string]>;

    "sushiswapPair()"(overrides?: CallOverrides): Promise<[string]>;

    sushiswapRouter(overrides?: CallOverrides): Promise<[string]>;

    "sushiswapRouter()"(overrides?: CallOverrides): Promise<[string]>;

    swapCrvPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "swapCrvPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    swapEthPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "swapEthPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    swapForYveCrvPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "swapForYveCrvPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    swapPair(overrides?: CallOverrides): Promise<[string]>;

    "swapPair()"(overrides?: CallOverrides): Promise<[string]>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    "swapRouter()"(overrides?: CallOverrides): Promise<[string]>;

    sweep(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sweep(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniswapPair(overrides?: CallOverrides): Promise<[string]>;

    "uniswapPair()"(overrides?: CallOverrides): Promise<[string]>;

    uniswapRouter(overrides?: CallOverrides): Promise<[string]>;

    "uniswapRouter()"(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    "weth()"(overrides?: CallOverrides): Promise<[string]>;

    yVault(overrides?: CallOverrides): Promise<[string]>;

    "yVault()"(overrides?: CallOverrides): Promise<[string]>;

    yveCrv(overrides?: CallOverrides): Promise<[string]>;

    "yveCrv()"(overrides?: CallOverrides): Promise<[string]>;

    zapInCRV(
      crvAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "zapInCRV(uint256)"(
      crvAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    zapInETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "zapInETH()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activeDex(overrides?: CallOverrides): Promise<string>;

  "activeDex()"(overrides?: CallOverrides): Promise<string>;

  crv(overrides?: CallOverrides): Promise<string>;

  "crv()"(overrides?: CallOverrides): Promise<string>;

  ethYveCrv(overrides?: CallOverrides): Promise<string>;

  "ethYveCrv()"(overrides?: CallOverrides): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pickleJar(overrides?: CallOverrides): Promise<string>;

  "pickleJar()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setActiveDex(
    exchange: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setActiveDex(uint256)"(
    exchange: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGovernance(address)"(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sushiswapPair(overrides?: CallOverrides): Promise<string>;

  "sushiswapPair()"(overrides?: CallOverrides): Promise<string>;

  sushiswapRouter(overrides?: CallOverrides): Promise<string>;

  "sushiswapRouter()"(overrides?: CallOverrides): Promise<string>;

  swapCrvPath(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "swapCrvPath(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  swapEthPath(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "swapEthPath(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  swapForYveCrvPath(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "swapForYveCrvPath(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  swapPair(overrides?: CallOverrides): Promise<string>;

  "swapPair()"(overrides?: CallOverrides): Promise<string>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  "swapRouter()"(overrides?: CallOverrides): Promise<string>;

  sweep(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sweep(address)"(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniswapPair(overrides?: CallOverrides): Promise<string>;

  "uniswapPair()"(overrides?: CallOverrides): Promise<string>;

  uniswapRouter(overrides?: CallOverrides): Promise<string>;

  "uniswapRouter()"(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  yVault(overrides?: CallOverrides): Promise<string>;

  "yVault()"(overrides?: CallOverrides): Promise<string>;

  yveCrv(overrides?: CallOverrides): Promise<string>;

  "yveCrv()"(overrides?: CallOverrides): Promise<string>;

  zapInCRV(
    crvAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "zapInCRV(uint256)"(
    crvAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  zapInETH(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "zapInETH()"(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeDex(overrides?: CallOverrides): Promise<string>;

    "activeDex()"(overrides?: CallOverrides): Promise<string>;

    crv(overrides?: CallOverrides): Promise<string>;

    "crv()"(overrides?: CallOverrides): Promise<string>;

    ethYveCrv(overrides?: CallOverrides): Promise<string>;

    "ethYveCrv()"(overrides?: CallOverrides): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pickleJar(overrides?: CallOverrides): Promise<string>;

    "pickleJar()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setActiveDex(
      exchange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setActiveDex(uint256)"(
      exchange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sushiswapPair(overrides?: CallOverrides): Promise<string>;

    "sushiswapPair()"(overrides?: CallOverrides): Promise<string>;

    sushiswapRouter(overrides?: CallOverrides): Promise<string>;

    "sushiswapRouter()"(overrides?: CallOverrides): Promise<string>;

    swapCrvPath(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "swapCrvPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    swapEthPath(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "swapEthPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    swapForYveCrvPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "swapForYveCrvPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    swapPair(overrides?: CallOverrides): Promise<string>;

    "swapPair()"(overrides?: CallOverrides): Promise<string>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    "swapRouter()"(overrides?: CallOverrides): Promise<string>;

    sweep(_token: string, overrides?: CallOverrides): Promise<void>;

    "sweep(address)"(_token: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapPair(overrides?: CallOverrides): Promise<string>;

    "uniswapPair()"(overrides?: CallOverrides): Promise<string>;

    uniswapRouter(overrides?: CallOverrides): Promise<string>;

    "uniswapRouter()"(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;

    yVault(overrides?: CallOverrides): Promise<string>;

    "yVault()"(overrides?: CallOverrides): Promise<string>;

    yveCrv(overrides?: CallOverrides): Promise<string>;

    "yveCrv()"(overrides?: CallOverrides): Promise<string>;

    zapInCRV(crvAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "zapInCRV(uint256)"(
      crvAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    zapInETH(overrides?: CallOverrides): Promise<void>;

    "zapInETH()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    activeDex(overrides?: CallOverrides): Promise<BigNumber>;

    "activeDex()"(overrides?: CallOverrides): Promise<BigNumber>;

    crv(overrides?: CallOverrides): Promise<BigNumber>;

    "crv()"(overrides?: CallOverrides): Promise<BigNumber>;

    ethYveCrv(overrides?: CallOverrides): Promise<BigNumber>;

    "ethYveCrv()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pickleJar(overrides?: CallOverrides): Promise<BigNumber>;

    "pickleJar()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setActiveDex(
      exchange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setActiveDex(uint256)"(
      exchange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sushiswapPair(overrides?: CallOverrides): Promise<BigNumber>;

    "sushiswapPair()"(overrides?: CallOverrides): Promise<BigNumber>;

    sushiswapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "sushiswapRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapCrvPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapCrvPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapEthPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapEthPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapForYveCrvPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapForYveCrvPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapPair(overrides?: CallOverrides): Promise<BigNumber>;

    "swapPair()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "swapRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    sweep(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sweep(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniswapPair(overrides?: CallOverrides): Promise<BigNumber>;

    "uniswapPair()"(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "uniswapRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;

    yVault(overrides?: CallOverrides): Promise<BigNumber>;

    "yVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    yveCrv(overrides?: CallOverrides): Promise<BigNumber>;

    "yveCrv()"(overrides?: CallOverrides): Promise<BigNumber>;

    zapInCRV(
      crvAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "zapInCRV(uint256)"(
      crvAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    zapInETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "zapInETH()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeDex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "activeDex()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "crv()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethYveCrv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ethYveCrv()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pickleJar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pickleJar()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setActiveDex(
      exchange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setActiveDex(uint256)"(
      exchange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sushiswapPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sushiswapPair()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sushiswapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sushiswapRouter()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapCrvPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "swapCrvPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapEthPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "swapEthPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapForYveCrvPath(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "swapForYveCrvPath(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "swapPair()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "swapRouter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweep(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sweep(address)"(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniswapPair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniswapPair()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniswapRouter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yVault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yveCrv(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yveCrv()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zapInCRV(
      crvAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "zapInCRV(uint256)"(
      crvAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    zapInETH(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "zapInETH()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
