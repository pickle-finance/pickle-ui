/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DodoPairInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "_BASE_PRICE_CUMULATIVE_LAST_()": FunctionFragment;
    "_BASE_RESERVE_()": FunctionFragment;
    "_BASE_TARGET_()": FunctionFragment;
    "_BASE_TOKEN_()": FunctionFragment;
    "_BLOCK_TIMESTAMP_LAST_()": FunctionFragment;
    "_IS_OPEN_TWAP_()": FunctionFragment;
    "_I_()": FunctionFragment;
    "_K_()": FunctionFragment;
    "_LP_FEE_RATE_()": FunctionFragment;
    "_MAINTAINER_()": FunctionFragment;
    "_MT_FEE_RATE_MODEL_()": FunctionFragment;
    "_QUOTE_RESERVE_()": FunctionFragment;
    "_QUOTE_TARGET_()": FunctionFragment;
    "_QUOTE_TOKEN_()": FunctionFragment;
    "_RState_()": FunctionFragment;
    "addressToShortString(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyShares(address)": FunctionFragment;
    "correctRState()": FunctionFragment;
    "decimals()": FunctionFragment;
    "flashLoan(uint256,uint256,address,bytes)": FunctionFragment;
    "getBaseInput()": FunctionFragment;
    "getMidPrice()": FunctionFragment;
    "getPMMState()": FunctionFragment;
    "getPMMStateForCall()": FunctionFragment;
    "getQuoteInput()": FunctionFragment;
    "getUserFeeRate(address)": FunctionFragment;
    "getVaultReserve()": FunctionFragment;
    "init(address,address,address,uint256,address,uint256,uint256,bool)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "querySellBase(address,uint256)": FunctionFragment;
    "querySellQuote(address,uint256)": FunctionFragment;
    "sellBase(address)": FunctionFragment;
    "sellQuote(address)": FunctionFragment;
    "sellShares(uint256,address,uint256,uint256,bytes,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "sync()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_BASE_PRICE_CUMULATIVE_LAST_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_BASE_RESERVE_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_BASE_TARGET_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_BASE_TOKEN_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_BLOCK_TIMESTAMP_LAST_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_IS_OPEN_TWAP_",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_I_", values?: undefined): string;
  encodeFunctionData(functionFragment: "_K_", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_LP_FEE_RATE_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_MAINTAINER_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_MT_FEE_RATE_MODEL_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_QUOTE_RESERVE_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_QUOTE_TARGET_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_QUOTE_TOKEN_",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_RState_", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addressToShortString",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "buyShares", values: [string]): string;
  encodeFunctionData(
    functionFragment: "correctRState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseInput",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMidPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPMMState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPMMStateForCall",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteInput",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserFeeRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      string,
      string,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "querySellBase",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "querySellQuote",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sellBase", values: [string]): string;
  encodeFunctionData(functionFragment: "sellQuote", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sellShares",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_BASE_PRICE_CUMULATIVE_LAST_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_BASE_RESERVE_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_BASE_TARGET_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_BASE_TOKEN_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_BLOCK_TIMESTAMP_LAST_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_IS_OPEN_TWAP_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_I_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_K_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_LP_FEE_RATE_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_MAINTAINER_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_MT_FEE_RATE_MODEL_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_QUOTE_RESERVE_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_QUOTE_TARGET_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_QUOTE_TOKEN_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_RState_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressToShortString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "correctRState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMidPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPMMState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPMMStateForCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteInput",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "querySellBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "querySellQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellQuote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Burn(address,uint256)": EventFragment;
    "BuyShares(address,uint256,uint256)": EventFragment;
    "DODOFlashLoan(address,address,uint256,uint256)": EventFragment;
    "DODOSwap(address,address,uint256,uint256,address,address)": EventFragment;
    "Mint(address,uint256)": EventFragment;
    "RChange(uint8)": EventFragment;
    "SellShares(address,address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyShares"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DODOFlashLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DODOSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellShares"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class DodoPair extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DodoPairInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    _BASE_PRICE_CUMULATIVE_LAST_(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "_BASE_PRICE_CUMULATIVE_LAST_()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _BASE_RESERVE_(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_BASE_RESERVE_()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _BASE_TARGET_(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_BASE_TARGET_()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _BASE_TOKEN_(overrides?: CallOverrides): Promise<[string]>;

    "_BASE_TOKEN_()"(overrides?: CallOverrides): Promise<[string]>;

    _BLOCK_TIMESTAMP_LAST_(overrides?: CallOverrides): Promise<[number]>;

    "_BLOCK_TIMESTAMP_LAST_()"(overrides?: CallOverrides): Promise<[number]>;

    _IS_OPEN_TWAP_(overrides?: CallOverrides): Promise<[boolean]>;

    "_IS_OPEN_TWAP_()"(overrides?: CallOverrides): Promise<[boolean]>;

    _I_(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_I_()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _K_(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_K_()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _LP_FEE_RATE_(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_LP_FEE_RATE_()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _MAINTAINER_(overrides?: CallOverrides): Promise<[string]>;

    "_MAINTAINER_()"(overrides?: CallOverrides): Promise<[string]>;

    _MT_FEE_RATE_MODEL_(overrides?: CallOverrides): Promise<[string]>;

    "_MT_FEE_RATE_MODEL_()"(overrides?: CallOverrides): Promise<[string]>;

    _QUOTE_RESERVE_(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_QUOTE_RESERVE_()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _QUOTE_TARGET_(overrides?: CallOverrides): Promise<[BigNumber]>;

    "_QUOTE_TARGET_()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    _QUOTE_TOKEN_(overrides?: CallOverrides): Promise<[string]>;

    "_QUOTE_TOKEN_()"(overrides?: CallOverrides): Promise<[string]>;

    _RState_(overrides?: CallOverrides): Promise<[number]>;

    "_RState_()"(overrides?: CallOverrides): Promise<[number]>;

    addressToShortString(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "addressToShortString(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    buyShares(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buyShares(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    correctRState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "correctRState()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    flashLoan(
      baseAmount: BigNumberish,
      quoteAmount: BigNumberish,
      assetTo: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "flashLoan(uint256,uint256,address,bytes)"(
      baseAmount: BigNumberish,
      quoteAmount: BigNumberish,
      assetTo: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBaseInput(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { input: BigNumber }>;

    "getBaseInput()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { input: BigNumber }>;

    getMidPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { midPrice: BigNumber }>;

    "getMidPrice()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { midPrice: BigNumber }>;

    getPMMState(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          i: BigNumber;
          K: BigNumber;
          B: BigNumber;
          Q: BigNumber;
          B0: BigNumber;
          Q0: BigNumber;
          R: number;
        }
      ] & {
        state: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          i: BigNumber;
          K: BigNumber;
          B: BigNumber;
          Q: BigNumber;
          B0: BigNumber;
          Q0: BigNumber;
          R: number;
        };
      }
    >;

    "getPMMState()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          i: BigNumber;
          K: BigNumber;
          B: BigNumber;
          Q: BigNumber;
          B0: BigNumber;
          Q0: BigNumber;
          R: number;
        }
      ] & {
        state: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          number
        ] & {
          i: BigNumber;
          K: BigNumber;
          B: BigNumber;
          Q: BigNumber;
          B0: BigNumber;
          Q0: BigNumber;
          R: number;
        };
      }
    >;

    getPMMStateForCall(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        i: BigNumber;
        K: BigNumber;
        B: BigNumber;
        Q: BigNumber;
        B0: BigNumber;
        Q0: BigNumber;
        R: BigNumber;
      }
    >;

    "getPMMStateForCall()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        i: BigNumber;
        K: BigNumber;
        B: BigNumber;
        Q: BigNumber;
        B0: BigNumber;
        Q0: BigNumber;
        R: BigNumber;
      }
    >;

    getQuoteInput(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { input: BigNumber }>;

    "getQuoteInput()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { input: BigNumber }>;

    getUserFeeRate(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { lpFeeRate: BigNumber; mtFeeRate: BigNumber }
    >;

    "getUserFeeRate(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { lpFeeRate: BigNumber; mtFeeRate: BigNumber }
    >;

    getVaultReserve(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        baseReserve: BigNumber;
        quoteReserve: BigNumber;
      }
    >;

    "getVaultReserve()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        baseReserve: BigNumber;
        quoteReserve: BigNumber;
      }
    >;

    init(
      maintainer: string,
      baseTokenAddress: string,
      quoteTokenAddress: string,
      lpFeeRate: BigNumberish,
      mtFeeRateModel: string,
      i: BigNumberish,
      k: BigNumberish,
      isOpenTWAP: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "init(address,address,address,uint256,address,uint256,uint256,bool)"(
      maintainer: string,
      baseTokenAddress: string,
      quoteTokenAddress: string,
      lpFeeRate: BigNumberish,
      mtFeeRateModel: string,
      i: BigNumberish,
      k: BigNumberish,
      isOpenTWAP: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    querySellBase(
      trader: string,
      payBaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        receiveQuoteAmount: BigNumber;
        mtFee: BigNumber;
        newRState: number;
        newBaseTarget: BigNumber;
      }
    >;

    "querySellBase(address,uint256)"(
      trader: string,
      payBaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        receiveQuoteAmount: BigNumber;
        mtFee: BigNumber;
        newRState: number;
        newBaseTarget: BigNumber;
      }
    >;

    querySellQuote(
      trader: string,
      payQuoteAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        receiveBaseAmount: BigNumber;
        mtFee: BigNumber;
        newRState: number;
        newQuoteTarget: BigNumber;
      }
    >;

    "querySellQuote(address,uint256)"(
      trader: string,
      payQuoteAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        receiveBaseAmount: BigNumber;
        mtFee: BigNumber;
        newRState: number;
        newQuoteTarget: BigNumber;
      }
    >;

    sellBase(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sellBase(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellQuote(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sellQuote(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellShares(
      shareAmount: BigNumberish,
      to: string,
      baseMinAmount: BigNumberish,
      quoteMinAmount: BigNumberish,
      data: BytesLike,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sellShares(uint256,address,uint256,uint256,bytes,uint256)"(
      shareAmount: BigNumberish,
      to: string,
      baseMinAmount: BigNumberish,
      quoteMinAmount: BigNumberish,
      data: BytesLike,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sync()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;

    "version()"(overrides?: CallOverrides): Promise<[string]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  _BASE_PRICE_CUMULATIVE_LAST_(overrides?: CallOverrides): Promise<BigNumber>;

  "_BASE_PRICE_CUMULATIVE_LAST_()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _BASE_RESERVE_(overrides?: CallOverrides): Promise<BigNumber>;

  "_BASE_RESERVE_()"(overrides?: CallOverrides): Promise<BigNumber>;

  _BASE_TARGET_(overrides?: CallOverrides): Promise<BigNumber>;

  "_BASE_TARGET_()"(overrides?: CallOverrides): Promise<BigNumber>;

  _BASE_TOKEN_(overrides?: CallOverrides): Promise<string>;

  "_BASE_TOKEN_()"(overrides?: CallOverrides): Promise<string>;

  _BLOCK_TIMESTAMP_LAST_(overrides?: CallOverrides): Promise<number>;

  "_BLOCK_TIMESTAMP_LAST_()"(overrides?: CallOverrides): Promise<number>;

  _IS_OPEN_TWAP_(overrides?: CallOverrides): Promise<boolean>;

  "_IS_OPEN_TWAP_()"(overrides?: CallOverrides): Promise<boolean>;

  _I_(overrides?: CallOverrides): Promise<BigNumber>;

  "_I_()"(overrides?: CallOverrides): Promise<BigNumber>;

  _K_(overrides?: CallOverrides): Promise<BigNumber>;

  "_K_()"(overrides?: CallOverrides): Promise<BigNumber>;

  _LP_FEE_RATE_(overrides?: CallOverrides): Promise<BigNumber>;

  "_LP_FEE_RATE_()"(overrides?: CallOverrides): Promise<BigNumber>;

  _MAINTAINER_(overrides?: CallOverrides): Promise<string>;

  "_MAINTAINER_()"(overrides?: CallOverrides): Promise<string>;

  _MT_FEE_RATE_MODEL_(overrides?: CallOverrides): Promise<string>;

  "_MT_FEE_RATE_MODEL_()"(overrides?: CallOverrides): Promise<string>;

  _QUOTE_RESERVE_(overrides?: CallOverrides): Promise<BigNumber>;

  "_QUOTE_RESERVE_()"(overrides?: CallOverrides): Promise<BigNumber>;

  _QUOTE_TARGET_(overrides?: CallOverrides): Promise<BigNumber>;

  "_QUOTE_TARGET_()"(overrides?: CallOverrides): Promise<BigNumber>;

  _QUOTE_TOKEN_(overrides?: CallOverrides): Promise<string>;

  "_QUOTE_TOKEN_()"(overrides?: CallOverrides): Promise<string>;

  _RState_(overrides?: CallOverrides): Promise<number>;

  "_RState_()"(overrides?: CallOverrides): Promise<number>;

  addressToShortString(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "addressToShortString(address)"(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyShares(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buyShares(address)"(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  correctRState(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "correctRState()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  flashLoan(
    baseAmount: BigNumberish,
    quoteAmount: BigNumberish,
    assetTo: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "flashLoan(uint256,uint256,address,bytes)"(
    baseAmount: BigNumberish,
    quoteAmount: BigNumberish,
    assetTo: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBaseInput(overrides?: CallOverrides): Promise<BigNumber>;

  "getBaseInput()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMidPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "getMidPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPMMState(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      i: BigNumber;
      K: BigNumber;
      B: BigNumber;
      Q: BigNumber;
      B0: BigNumber;
      Q0: BigNumber;
      R: number;
    }
  >;

  "getPMMState()"(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number
    ] & {
      i: BigNumber;
      K: BigNumber;
      B: BigNumber;
      Q: BigNumber;
      B0: BigNumber;
      Q0: BigNumber;
      R: number;
    }
  >;

  getPMMStateForCall(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      i: BigNumber;
      K: BigNumber;
      B: BigNumber;
      Q: BigNumber;
      B0: BigNumber;
      Q0: BigNumber;
      R: BigNumber;
    }
  >;

  "getPMMStateForCall()"(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      i: BigNumber;
      K: BigNumber;
      B: BigNumber;
      Q: BigNumber;
      B0: BigNumber;
      Q0: BigNumber;
      R: BigNumber;
    }
  >;

  getQuoteInput(overrides?: CallOverrides): Promise<BigNumber>;

  "getQuoteInput()"(overrides?: CallOverrides): Promise<BigNumber>;

  getUserFeeRate(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { lpFeeRate: BigNumber; mtFeeRate: BigNumber }
  >;

  "getUserFeeRate(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { lpFeeRate: BigNumber; mtFeeRate: BigNumber }
  >;

  getVaultReserve(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { baseReserve: BigNumber; quoteReserve: BigNumber }
  >;

  "getVaultReserve()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { baseReserve: BigNumber; quoteReserve: BigNumber }
  >;

  init(
    maintainer: string,
    baseTokenAddress: string,
    quoteTokenAddress: string,
    lpFeeRate: BigNumberish,
    mtFeeRateModel: string,
    i: BigNumberish,
    k: BigNumberish,
    isOpenTWAP: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "init(address,address,address,uint256,address,uint256,uint256,bool)"(
    maintainer: string,
    baseTokenAddress: string,
    quoteTokenAddress: string,
    lpFeeRate: BigNumberish,
    mtFeeRateModel: string,
    i: BigNumberish,
    k: BigNumberish,
    isOpenTWAP: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  querySellBase(
    trader: string,
    payBaseAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, BigNumber] & {
      receiveQuoteAmount: BigNumber;
      mtFee: BigNumber;
      newRState: number;
      newBaseTarget: BigNumber;
    }
  >;

  "querySellBase(address,uint256)"(
    trader: string,
    payBaseAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, BigNumber] & {
      receiveQuoteAmount: BigNumber;
      mtFee: BigNumber;
      newRState: number;
      newBaseTarget: BigNumber;
    }
  >;

  querySellQuote(
    trader: string,
    payQuoteAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, BigNumber] & {
      receiveBaseAmount: BigNumber;
      mtFee: BigNumber;
      newRState: number;
      newQuoteTarget: BigNumber;
    }
  >;

  "querySellQuote(address,uint256)"(
    trader: string,
    payQuoteAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, number, BigNumber] & {
      receiveBaseAmount: BigNumber;
      mtFee: BigNumber;
      newRState: number;
      newQuoteTarget: BigNumber;
    }
  >;

  sellBase(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sellBase(address)"(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellQuote(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sellQuote(address)"(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellShares(
    shareAmount: BigNumberish,
    to: string,
    baseMinAmount: BigNumberish,
    quoteMinAmount: BigNumberish,
    data: BytesLike,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sellShares(uint256,address,uint256,uint256,bytes,uint256)"(
    shareAmount: BigNumberish,
    to: string,
    baseMinAmount: BigNumberish,
    quoteMinAmount: BigNumberish,
    data: BytesLike,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  sync(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sync()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  "version()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    _BASE_PRICE_CUMULATIVE_LAST_(overrides?: CallOverrides): Promise<BigNumber>;

    "_BASE_PRICE_CUMULATIVE_LAST_()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _BASE_RESERVE_(overrides?: CallOverrides): Promise<BigNumber>;

    "_BASE_RESERVE_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _BASE_TARGET_(overrides?: CallOverrides): Promise<BigNumber>;

    "_BASE_TARGET_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _BASE_TOKEN_(overrides?: CallOverrides): Promise<string>;

    "_BASE_TOKEN_()"(overrides?: CallOverrides): Promise<string>;

    _BLOCK_TIMESTAMP_LAST_(overrides?: CallOverrides): Promise<number>;

    "_BLOCK_TIMESTAMP_LAST_()"(overrides?: CallOverrides): Promise<number>;

    _IS_OPEN_TWAP_(overrides?: CallOverrides): Promise<boolean>;

    "_IS_OPEN_TWAP_()"(overrides?: CallOverrides): Promise<boolean>;

    _I_(overrides?: CallOverrides): Promise<BigNumber>;

    "_I_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _K_(overrides?: CallOverrides): Promise<BigNumber>;

    "_K_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _LP_FEE_RATE_(overrides?: CallOverrides): Promise<BigNumber>;

    "_LP_FEE_RATE_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _MAINTAINER_(overrides?: CallOverrides): Promise<string>;

    "_MAINTAINER_()"(overrides?: CallOverrides): Promise<string>;

    _MT_FEE_RATE_MODEL_(overrides?: CallOverrides): Promise<string>;

    "_MT_FEE_RATE_MODEL_()"(overrides?: CallOverrides): Promise<string>;

    _QUOTE_RESERVE_(overrides?: CallOverrides): Promise<BigNumber>;

    "_QUOTE_RESERVE_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _QUOTE_TARGET_(overrides?: CallOverrides): Promise<BigNumber>;

    "_QUOTE_TARGET_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _QUOTE_TOKEN_(overrides?: CallOverrides): Promise<string>;

    "_QUOTE_TOKEN_()"(overrides?: CallOverrides): Promise<string>;

    _RState_(overrides?: CallOverrides): Promise<number>;

    "_RState_()"(overrides?: CallOverrides): Promise<number>;

    addressToShortString(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "addressToShortString(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyShares(
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        baseInput: BigNumber;
        quoteInput: BigNumber;
      }
    >;

    "buyShares(address)"(
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        baseInput: BigNumber;
        quoteInput: BigNumber;
      }
    >;

    correctRState(overrides?: CallOverrides): Promise<void>;

    "correctRState()"(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    flashLoan(
      baseAmount: BigNumberish,
      quoteAmount: BigNumberish,
      assetTo: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "flashLoan(uint256,uint256,address,bytes)"(
      baseAmount: BigNumberish,
      quoteAmount: BigNumberish,
      assetTo: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getBaseInput(overrides?: CallOverrides): Promise<BigNumber>;

    "getBaseInput()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMidPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getMidPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPMMState(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        i: BigNumber;
        K: BigNumber;
        B: BigNumber;
        Q: BigNumber;
        B0: BigNumber;
        Q0: BigNumber;
        R: number;
      }
    >;

    "getPMMState()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number
      ] & {
        i: BigNumber;
        K: BigNumber;
        B: BigNumber;
        Q: BigNumber;
        B0: BigNumber;
        Q0: BigNumber;
        R: number;
      }
    >;

    getPMMStateForCall(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        i: BigNumber;
        K: BigNumber;
        B: BigNumber;
        Q: BigNumber;
        B0: BigNumber;
        Q0: BigNumber;
        R: BigNumber;
      }
    >;

    "getPMMStateForCall()"(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        i: BigNumber;
        K: BigNumber;
        B: BigNumber;
        Q: BigNumber;
        B0: BigNumber;
        Q0: BigNumber;
        R: BigNumber;
      }
    >;

    getQuoteInput(overrides?: CallOverrides): Promise<BigNumber>;

    "getQuoteInput()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUserFeeRate(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { lpFeeRate: BigNumber; mtFeeRate: BigNumber }
    >;

    "getUserFeeRate(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { lpFeeRate: BigNumber; mtFeeRate: BigNumber }
    >;

    getVaultReserve(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        baseReserve: BigNumber;
        quoteReserve: BigNumber;
      }
    >;

    "getVaultReserve()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        baseReserve: BigNumber;
        quoteReserve: BigNumber;
      }
    >;

    init(
      maintainer: string,
      baseTokenAddress: string,
      quoteTokenAddress: string,
      lpFeeRate: BigNumberish,
      mtFeeRateModel: string,
      i: BigNumberish,
      k: BigNumberish,
      isOpenTWAP: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "init(address,address,address,uint256,address,uint256,uint256,bool)"(
      maintainer: string,
      baseTokenAddress: string,
      quoteTokenAddress: string,
      lpFeeRate: BigNumberish,
      mtFeeRateModel: string,
      i: BigNumberish,
      k: BigNumberish,
      isOpenTWAP: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    querySellBase(
      trader: string,
      payBaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        receiveQuoteAmount: BigNumber;
        mtFee: BigNumber;
        newRState: number;
        newBaseTarget: BigNumber;
      }
    >;

    "querySellBase(address,uint256)"(
      trader: string,
      payBaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        receiveQuoteAmount: BigNumber;
        mtFee: BigNumber;
        newRState: number;
        newBaseTarget: BigNumber;
      }
    >;

    querySellQuote(
      trader: string,
      payQuoteAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        receiveBaseAmount: BigNumber;
        mtFee: BigNumber;
        newRState: number;
        newQuoteTarget: BigNumber;
      }
    >;

    "querySellQuote(address,uint256)"(
      trader: string,
      payQuoteAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number, BigNumber] & {
        receiveBaseAmount: BigNumber;
        mtFee: BigNumber;
        newRState: number;
        newQuoteTarget: BigNumber;
      }
    >;

    sellBase(to: string, overrides?: CallOverrides): Promise<BigNumber>;

    "sellBase(address)"(
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellQuote(to: string, overrides?: CallOverrides): Promise<BigNumber>;

    "sellQuote(address)"(
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellShares(
      shareAmount: BigNumberish,
      to: string,
      baseMinAmount: BigNumberish,
      quoteMinAmount: BigNumberish,
      data: BytesLike,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { baseAmount: BigNumber; quoteAmount: BigNumber }
    >;

    "sellShares(uint256,address,uint256,uint256,bytes,uint256)"(
      shareAmount: BigNumberish,
      to: string,
      baseMinAmount: BigNumberish,
      quoteMinAmount: BigNumberish,
      data: BytesLike,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { baseAmount: BigNumber; quoteAmount: BigNumber }
    >;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    sync(overrides?: CallOverrides): Promise<void>;

    "sync()"(overrides?: CallOverrides): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<string>;

    "version()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; amount: BigNumber }
    >;

    Burn(
      user: string | null,
      value: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; value: BigNumber }
    >;

    BuyShares(
      to: null,
      increaseShares: null,
      totalShares: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { to: string; increaseShares: BigNumber; totalShares: BigNumber }
    >;

    DODOFlashLoan(
      borrower: null,
      assetTo: null,
      baseAmount: null,
      quoteAmount: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        borrower: string;
        assetTo: string;
        baseAmount: BigNumber;
        quoteAmount: BigNumber;
      }
    >;

    DODOSwap(
      fromToken: null,
      toToken: null,
      fromAmount: null,
      toAmount: null,
      trader: null,
      receiver: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string, string],
      {
        fromToken: string;
        toToken: string;
        fromAmount: BigNumber;
        toAmount: BigNumber;
        trader: string;
        receiver: string;
      }
    >;

    Mint(
      user: string | null,
      value: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; value: BigNumber }
    >;

    RChange(newRState: null): TypedEventFilter<[number], { newRState: number }>;

    SellShares(
      payer: null,
      to: null,
      decreaseShares: null,
      totalShares: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        payer: string;
        to: string;
        decreaseShares: BigNumber;
        totalShares: BigNumber;
      }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    _BASE_PRICE_CUMULATIVE_LAST_(overrides?: CallOverrides): Promise<BigNumber>;

    "_BASE_PRICE_CUMULATIVE_LAST_()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _BASE_RESERVE_(overrides?: CallOverrides): Promise<BigNumber>;

    "_BASE_RESERVE_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _BASE_TARGET_(overrides?: CallOverrides): Promise<BigNumber>;

    "_BASE_TARGET_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _BASE_TOKEN_(overrides?: CallOverrides): Promise<BigNumber>;

    "_BASE_TOKEN_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _BLOCK_TIMESTAMP_LAST_(overrides?: CallOverrides): Promise<BigNumber>;

    "_BLOCK_TIMESTAMP_LAST_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _IS_OPEN_TWAP_(overrides?: CallOverrides): Promise<BigNumber>;

    "_IS_OPEN_TWAP_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _I_(overrides?: CallOverrides): Promise<BigNumber>;

    "_I_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _K_(overrides?: CallOverrides): Promise<BigNumber>;

    "_K_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _LP_FEE_RATE_(overrides?: CallOverrides): Promise<BigNumber>;

    "_LP_FEE_RATE_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _MAINTAINER_(overrides?: CallOverrides): Promise<BigNumber>;

    "_MAINTAINER_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _MT_FEE_RATE_MODEL_(overrides?: CallOverrides): Promise<BigNumber>;

    "_MT_FEE_RATE_MODEL_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _QUOTE_RESERVE_(overrides?: CallOverrides): Promise<BigNumber>;

    "_QUOTE_RESERVE_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _QUOTE_TARGET_(overrides?: CallOverrides): Promise<BigNumber>;

    "_QUOTE_TARGET_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _QUOTE_TOKEN_(overrides?: CallOverrides): Promise<BigNumber>;

    "_QUOTE_TOKEN_()"(overrides?: CallOverrides): Promise<BigNumber>;

    _RState_(overrides?: CallOverrides): Promise<BigNumber>;

    "_RState_()"(overrides?: CallOverrides): Promise<BigNumber>;

    addressToShortString(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addressToShortString(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyShares(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buyShares(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    correctRState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "correctRState()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    flashLoan(
      baseAmount: BigNumberish,
      quoteAmount: BigNumberish,
      assetTo: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "flashLoan(uint256,uint256,address,bytes)"(
      baseAmount: BigNumberish,
      quoteAmount: BigNumberish,
      assetTo: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBaseInput(overrides?: CallOverrides): Promise<BigNumber>;

    "getBaseInput()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMidPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getMidPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPMMState(overrides?: CallOverrides): Promise<BigNumber>;

    "getPMMState()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPMMStateForCall(overrides?: CallOverrides): Promise<BigNumber>;

    "getPMMStateForCall()"(overrides?: CallOverrides): Promise<BigNumber>;

    getQuoteInput(overrides?: CallOverrides): Promise<BigNumber>;

    "getQuoteInput()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUserFeeRate(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getUserFeeRate(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "getVaultReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      maintainer: string,
      baseTokenAddress: string,
      quoteTokenAddress: string,
      lpFeeRate: BigNumberish,
      mtFeeRateModel: string,
      i: BigNumberish,
      k: BigNumberish,
      isOpenTWAP: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "init(address,address,address,uint256,address,uint256,uint256,bool)"(
      maintainer: string,
      baseTokenAddress: string,
      quoteTokenAddress: string,
      lpFeeRate: BigNumberish,
      mtFeeRateModel: string,
      i: BigNumberish,
      k: BigNumberish,
      isOpenTWAP: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    querySellBase(
      trader: string,
      payBaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "querySellBase(address,uint256)"(
      trader: string,
      payBaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    querySellQuote(
      trader: string,
      payQuoteAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "querySellQuote(address,uint256)"(
      trader: string,
      payQuoteAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellBase(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sellBase(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellQuote(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sellQuote(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellShares(
      shareAmount: BigNumberish,
      to: string,
      baseMinAmount: BigNumberish,
      quoteMinAmount: BigNumberish,
      data: BytesLike,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sellShares(uint256,address,uint256,uint256,bytes,uint256)"(
      shareAmount: BigNumberish,
      to: string,
      baseMinAmount: BigNumberish,
      quoteMinAmount: BigNumberish,
      data: BytesLike,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sync()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERMIT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _BASE_PRICE_CUMULATIVE_LAST_(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_BASE_PRICE_CUMULATIVE_LAST_()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _BASE_RESERVE_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_BASE_RESERVE_()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _BASE_TARGET_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_BASE_TARGET_()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _BASE_TOKEN_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_BASE_TOKEN_()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _BLOCK_TIMESTAMP_LAST_(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_BLOCK_TIMESTAMP_LAST_()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _IS_OPEN_TWAP_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_IS_OPEN_TWAP_()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _I_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_I_()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _K_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_K_()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _LP_FEE_RATE_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_LP_FEE_RATE_()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _MAINTAINER_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_MAINTAINER_()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _MT_FEE_RATE_MODEL_(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_MT_FEE_RATE_MODEL_()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _QUOTE_RESERVE_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_QUOTE_RESERVE_()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _QUOTE_TARGET_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_QUOTE_TARGET_()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _QUOTE_TOKEN_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_QUOTE_TOKEN_()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _RState_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_RState_()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressToShortString(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addressToShortString(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyShares(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buyShares(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    correctRState(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "correctRState()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashLoan(
      baseAmount: BigNumberish,
      quoteAmount: BigNumberish,
      assetTo: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "flashLoan(uint256,uint256,address,bytes)"(
      baseAmount: BigNumberish,
      quoteAmount: BigNumberish,
      assetTo: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBaseInput(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBaseInput()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMidPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMidPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPMMState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPMMState()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPMMStateForCall(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPMMStateForCall()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuoteInput(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getQuoteInput()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserFeeRate(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserFeeRate(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getVaultReserve()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      maintainer: string,
      baseTokenAddress: string,
      quoteTokenAddress: string,
      lpFeeRate: BigNumberish,
      mtFeeRateModel: string,
      i: BigNumberish,
      k: BigNumberish,
      isOpenTWAP: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "init(address,address,address,uint256,address,uint256,uint256,bool)"(
      maintainer: string,
      baseTokenAddress: string,
      quoteTokenAddress: string,
      lpFeeRate: BigNumberish,
      mtFeeRateModel: string,
      i: BigNumberish,
      k: BigNumberish,
      isOpenTWAP: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    querySellBase(
      trader: string,
      payBaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "querySellBase(address,uint256)"(
      trader: string,
      payBaseAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    querySellQuote(
      trader: string,
      payQuoteAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "querySellQuote(address,uint256)"(
      trader: string,
      payQuoteAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellBase(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sellBase(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellQuote(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sellQuote(address)"(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellShares(
      shareAmount: BigNumberish,
      to: string,
      baseMinAmount: BigNumberish,
      quoteMinAmount: BigNumberish,
      data: BytesLike,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sellShares(uint256,address,uint256,uint256,bytes,uint256)"(
      shareAmount: BigNumberish,
      to: string,
      baseMinAmount: BigNumberish,
      quoteMinAmount: BigNumberish,
      data: BytesLike,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sync()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
