/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CommunalFarmInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "calcCurCombinedWeight(address)": FunctionFragment;
    "changeTokenManager(address,address)": FunctionFragment;
    "combinedWeightOf(address)": FunctionFragment;
    "earned(address)": FunctionFragment;
    "getAllRewardTokens()": FunctionFragment;
    "getReward()": FunctionFragment;
    "getRewardForDuration()": FunctionFragment;
    "getRewardSymbols()": FunctionFragment;
    "greylist(address)": FunctionFragment;
    "greylistAddress(address)": FunctionFragment;
    "initializeDefault()": FunctionFragment;
    "isTokenManagerFor(address,address)": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "lockMultiplier(uint256)": FunctionFragment;
    "lock_max_multiplier()": FunctionFragment;
    "lock_time_for_max_multiplier()": FunctionFragment;
    "lock_time_min()": FunctionFragment;
    "lockedLiquidityOf(address)": FunctionFragment;
    "lockedStakesOf(address)": FunctionFragment;
    "nominateNewOwner(address)": FunctionFragment;
    "nominatedOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "periodFinish()": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "rewardManagers(address)": FunctionFragment;
    "rewardRates(uint256)": FunctionFragment;
    "rewardSymbols(uint256)": FunctionFragment;
    "rewardTokenAddrToIdx(address)": FunctionFragment;
    "rewardTokens(uint256)": FunctionFragment;
    "rewardsCollectionPaused()": FunctionFragment;
    "rewardsDuration()": FunctionFragment;
    "rewardsPerToken()": FunctionFragment;
    "setLockedStakeTimeForMinAndMaxMultiplier(uint256,uint256)": FunctionFragment;
    "setMultipliers(uint256)": FunctionFragment;
    "setRewardRate(address,uint256,bool)": FunctionFragment;
    "setRewardsDuration(uint256)": FunctionFragment;
    "stakeLocked(uint256,uint256)": FunctionFragment;
    "stakesUnlocked()": FunctionFragment;
    "stakingPaused()": FunctionFragment;
    "sync()": FunctionFragment;
    "toggleRewardsCollection()": FunctionFragment;
    "toggleStaking()": FunctionFragment;
    "toggleWithdrawals()": FunctionFragment;
    "totalCombinedWeight()": FunctionFragment;
    "totalLiquidityLocked()": FunctionFragment;
    "unlockStakes()": FunctionFragment;
    "withdrawLocked(bytes32)": FunctionFragment;
    "withdrawalsPaused()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcCurCombinedWeight",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTokenManager",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "combinedWeightOf",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAllRewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRewardForDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardSymbols",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "greylist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "greylistAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeDefault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenManagerFor",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lock_max_multiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lock_time_for_max_multiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lock_time_min",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedLiquidityOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedStakesOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodFinish",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardManagers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSymbols",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenAddrToIdx",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsCollectionPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLockedStakeTimeForMinAndMaxMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultipliers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRate",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeLocked",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakesUnlocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleRewardsCollection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCombinedWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLiquidityLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockStakes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLocked",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalsPaused",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcCurCombinedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTokenManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "combinedWeightOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardForDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "greylist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "greylistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenManagerFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lock_max_multiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lock_time_for_max_multiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lock_time_min",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedLiquidityOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedStakesOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardManagers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardSymbols",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenAddrToIdx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsCollectionPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockedStakeTimeForMinAndMaxMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakesUnlocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleRewardsCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCombinedWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidityLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalsPaused",
    data: BytesLike
  ): Result;

  events: {
    "DefaultInitialization()": EventFragment;
    "LockedStakeMaxMultiplierUpdated(uint256)": EventFragment;
    "LockedStakeMinTime(uint256)": EventFragment;
    "LockedStakeTimeForMaxMultiplier(uint256)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "OwnerNominated(address)": EventFragment;
    "Recovered(address,address,uint256)": EventFragment;
    "RewardPaid(address,uint256,address,address)": EventFragment;
    "RewardsDurationUpdated(uint256)": EventFragment;
    "RewardsPeriodRenewed(address)": EventFragment;
    "StakeLocked(address,uint256,uint256,bytes32,address)": EventFragment;
    "WithdrawLocked(address,uint256,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DefaultInitialization"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LockedStakeMaxMultiplierUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockedStakeMinTime"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LockedStakeTimeForMaxMultiplier"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNominated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDurationUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsPeriodRenewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawLocked"): EventFragment;
}

export class CommunalFarm extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CommunalFarmInterface;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcCurCombinedWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        old_combined_weight: BigNumber;
        new_combined_weight: BigNumber;
      }
    >;

    "calcCurCombinedWeight(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        old_combined_weight: BigNumber;
        new_combined_weight: BigNumber;
      }
    >;

    changeTokenManager(
      reward_token_address: string,
      new_manager_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeTokenManager(address,address)"(
      reward_token_address: string,
      new_manager_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    combinedWeightOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "combinedWeightOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { new_earned: BigNumber[] }>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { new_earned: BigNumber[] }>;

    getAllRewardTokens(overrides?: CallOverrides): Promise<[string[]]>;

    "getAllRewardTokens()"(overrides?: CallOverrides): Promise<[string[]]>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRewardForDuration(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { rewards_per_duration_arr: BigNumber[] }>;

    "getRewardForDuration()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { rewards_per_duration_arr: BigNumber[] }>;

    getRewardSymbols(overrides?: CallOverrides): Promise<[string[]]>;

    "getRewardSymbols()"(overrides?: CallOverrides): Promise<[string[]]>;

    greylist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "greylist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    greylistAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "greylistAddress(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeDefault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initializeDefault()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTokenManagerFor(
      caller_addr: string,
      reward_token_addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isTokenManagerFor(address,address)"(
      caller_addr: string,
      reward_token_addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockMultiplier(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lockMultiplier(uint256)"(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lock_max_multiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lock_max_multiplier()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lock_time_for_max_multiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lock_time_for_max_multiplier()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lock_time_min(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lock_time_min()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedLiquidityOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lockedLiquidityOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockedStakesOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          kek_id: string;
          start_timestamp: BigNumber;
          liquidity: BigNumber;
          ending_timestamp: BigNumber;
          lock_multiplier: BigNumber;
        })[]
      ]
    >;

    "lockedStakesOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          kek_id: string;
          start_timestamp: BigNumber;
          liquidity: BigNumber;
          ending_timestamp: BigNumber;
          lock_multiplier: BigNumber;
        })[]
      ]
    >;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    periodFinish(overrides?: CallOverrides): Promise<[BigNumber]>;

    "periodFinish()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardManagers(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "rewardManagers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rewardRates(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardSymbols(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "rewardSymbols(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardTokenAddrToIdx(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rewardTokenAddrToIdx(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "rewardTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewardsCollectionPaused(overrides?: CallOverrides): Promise<[boolean]>;

    "rewardsCollectionPaused()"(overrides?: CallOverrides): Promise<[boolean]>;

    rewardsDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardsDuration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsPerToken(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { newRewardsPerTokenStored: BigNumber[] }>;

    "rewardsPerToken()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { newRewardsPerTokenStored: BigNumber[] }>;

    setLockedStakeTimeForMinAndMaxMultiplier(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLockedStakeTimeForMinAndMaxMultiplier(uint256,uint256)"(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMultipliers(
      _lock_max_multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMultipliers(uint256)"(
      _lock_max_multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardRate(
      reward_token_address: string,
      new_rate: BigNumberish,
      sync_too: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRewardRate(address,uint256,bool)"(
      reward_token_address: string,
      new_rate: BigNumberish,
      sync_too: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardsDuration(
      _rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRewardsDuration(uint256)"(
      _rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeLocked(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stakeLocked(uint256,uint256)"(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakesUnlocked(overrides?: CallOverrides): Promise<[boolean]>;

    "stakesUnlocked()"(overrides?: CallOverrides): Promise<[boolean]>;

    stakingPaused(overrides?: CallOverrides): Promise<[boolean]>;

    "stakingPaused()"(overrides?: CallOverrides): Promise<[boolean]>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sync()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleRewardsCollection(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toggleRewardsCollection()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleStaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toggleStaking()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    toggleWithdrawals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "toggleWithdrawals()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalCombinedWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalCombinedWeight()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalLiquidityLocked(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalLiquidityLocked()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    unlockStakes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unlockStakes()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLocked(
      kek_id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawLocked(bytes32)"(
      kek_id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<[boolean]>;

    "withdrawalsPaused()"(overrides?: CallOverrides): Promise<[boolean]>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcCurCombinedWeight(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      old_combined_weight: BigNumber;
      new_combined_weight: BigNumber;
    }
  >;

  "calcCurCombinedWeight(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      old_combined_weight: BigNumber;
      new_combined_weight: BigNumber;
    }
  >;

  changeTokenManager(
    reward_token_address: string,
    new_manager_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeTokenManager(address,address)"(
    reward_token_address: string,
    new_manager_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  combinedWeightOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "combinedWeightOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  earned(account: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  "earned(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAllRewardTokens(overrides?: CallOverrides): Promise<string[]>;

  "getAllRewardTokens()"(overrides?: CallOverrides): Promise<string[]>;

  getReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getReward()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRewardForDuration(overrides?: CallOverrides): Promise<BigNumber[]>;

  "getRewardForDuration()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  getRewardSymbols(overrides?: CallOverrides): Promise<string[]>;

  "getRewardSymbols()"(overrides?: CallOverrides): Promise<string[]>;

  greylist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "greylist(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  greylistAddress(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "greylistAddress(address)"(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeDefault(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initializeDefault()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTokenManagerFor(
    caller_addr: string,
    reward_token_addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isTokenManagerFor(address,address)"(
    caller_addr: string,
    reward_token_addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockMultiplier(
    secs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lockMultiplier(uint256)"(
    secs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lock_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "lock_max_multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

  lock_time_for_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

  "lock_time_for_max_multiplier()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lock_time_min(overrides?: CallOverrides): Promise<BigNumber>;

  "lock_time_min()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockedLiquidityOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lockedLiquidityOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedStakesOf(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      kek_id: string;
      start_timestamp: BigNumber;
      liquidity: BigNumber;
      ending_timestamp: BigNumber;
      lock_multiplier: BigNumber;
    })[]
  >;

  "lockedStakesOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      kek_id: string;
      start_timestamp: BigNumber;
      liquidity: BigNumber;
      ending_timestamp: BigNumber;
      lock_multiplier: BigNumber;
    })[]
  >;

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "nominateNewOwner(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  "nominatedOwner()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

  "periodFinish()"(overrides?: CallOverrides): Promise<BigNumber>;

  recoverERC20(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "recoverERC20(address,uint256)"(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardManagers(arg0: string, overrides?: CallOverrides): Promise<string>;

  "rewardManagers(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardRates(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rewardRates(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardSymbols(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "rewardSymbols(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardTokenAddrToIdx(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rewardTokenAddrToIdx(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "rewardTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  rewardsCollectionPaused(overrides?: CallOverrides): Promise<boolean>;

  "rewardsCollectionPaused()"(overrides?: CallOverrides): Promise<boolean>;

  rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardsDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsPerToken(overrides?: CallOverrides): Promise<BigNumber[]>;

  "rewardsPerToken()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  setLockedStakeTimeForMinAndMaxMultiplier(
    _lock_time_for_max_multiplier: BigNumberish,
    _lock_time_min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLockedStakeTimeForMinAndMaxMultiplier(uint256,uint256)"(
    _lock_time_for_max_multiplier: BigNumberish,
    _lock_time_min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMultipliers(
    _lock_max_multiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMultipliers(uint256)"(
    _lock_max_multiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardRate(
    reward_token_address: string,
    new_rate: BigNumberish,
    sync_too: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRewardRate(address,uint256,bool)"(
    reward_token_address: string,
    new_rate: BigNumberish,
    sync_too: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardsDuration(
    _rewardsDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRewardsDuration(uint256)"(
    _rewardsDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeLocked(
    liquidity: BigNumberish,
    secs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stakeLocked(uint256,uint256)"(
    liquidity: BigNumberish,
    secs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakesUnlocked(overrides?: CallOverrides): Promise<boolean>;

  "stakesUnlocked()"(overrides?: CallOverrides): Promise<boolean>;

  stakingPaused(overrides?: CallOverrides): Promise<boolean>;

  "stakingPaused()"(overrides?: CallOverrides): Promise<boolean>;

  sync(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sync()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleRewardsCollection(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toggleRewardsCollection()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleStaking(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toggleStaking()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  toggleWithdrawals(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "toggleWithdrawals()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalCombinedWeight(overrides?: CallOverrides): Promise<BigNumber>;

  "totalCombinedWeight()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalLiquidityLocked(overrides?: CallOverrides): Promise<BigNumber>;

  "totalLiquidityLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

  unlockStakes(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unlockStakes()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLocked(
    kek_id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawLocked(bytes32)"(
    kek_id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalsPaused(overrides?: CallOverrides): Promise<boolean>;

  "withdrawalsPaused()"(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    calcCurCombinedWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        old_combined_weight: BigNumber;
        new_combined_weight: BigNumber;
      }
    >;

    "calcCurCombinedWeight(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        old_combined_weight: BigNumber;
        new_combined_weight: BigNumber;
      }
    >;

    changeTokenManager(
      reward_token_address: string,
      new_manager_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeTokenManager(address,address)"(
      reward_token_address: string,
      new_manager_address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    combinedWeightOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "combinedWeightOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAllRewardTokens(overrides?: CallOverrides): Promise<string[]>;

    "getAllRewardTokens()"(overrides?: CallOverrides): Promise<string[]>;

    getReward(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getReward()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    getRewardForDuration(overrides?: CallOverrides): Promise<BigNumber[]>;

    "getRewardForDuration()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    getRewardSymbols(overrides?: CallOverrides): Promise<string[]>;

    "getRewardSymbols()"(overrides?: CallOverrides): Promise<string[]>;

    greylist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "greylist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    greylistAddress(_address: string, overrides?: CallOverrides): Promise<void>;

    "greylistAddress(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeDefault(overrides?: CallOverrides): Promise<void>;

    "initializeDefault()"(overrides?: CallOverrides): Promise<void>;

    isTokenManagerFor(
      caller_addr: string,
      reward_token_addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isTokenManagerFor(address,address)"(
      caller_addr: string,
      reward_token_addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockMultiplier(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockMultiplier(uint256)"(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "lock_max_multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    lock_time_for_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "lock_time_for_max_multiplier()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock_time_min(overrides?: CallOverrides): Promise<BigNumber>;

    "lock_time_min()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedLiquidityOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedLiquidityOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedStakesOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        kek_id: string;
        start_timestamp: BigNumber;
        liquidity: BigNumber;
        ending_timestamp: BigNumber;
        lock_multiplier: BigNumber;
      })[]
    >;

    "lockedStakesOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        kek_id: string;
        start_timestamp: BigNumber;
        liquidity: BigNumber;
        ending_timestamp: BigNumber;
        lock_multiplier: BigNumber;
      })[]
    >;

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    "periodFinish()"(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardManagers(arg0: string, overrides?: CallOverrides): Promise<string>;

    "rewardManagers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardRates(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardSymbols(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "rewardSymbols(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardTokenAddrToIdx(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardTokenAddrToIdx(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "rewardTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rewardsCollectionPaused(overrides?: CallOverrides): Promise<boolean>;

    "rewardsCollectionPaused()"(overrides?: CallOverrides): Promise<boolean>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsPerToken(overrides?: CallOverrides): Promise<BigNumber[]>;

    "rewardsPerToken()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    setLockedStakeTimeForMinAndMaxMultiplier(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLockedStakeTimeForMinAndMaxMultiplier(uint256,uint256)"(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultipliers(
      _lock_max_multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMultipliers(uint256)"(
      _lock_max_multiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardRate(
      reward_token_address: string,
      new_rate: BigNumberish,
      sync_too: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardRate(address,uint256,bool)"(
      reward_token_address: string,
      new_rate: BigNumberish,
      sync_too: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardsDuration(
      _rewardsDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardsDuration(uint256)"(
      _rewardsDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeLocked(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakeLocked(uint256,uint256)"(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakesUnlocked(overrides?: CallOverrides): Promise<boolean>;

    "stakesUnlocked()"(overrides?: CallOverrides): Promise<boolean>;

    stakingPaused(overrides?: CallOverrides): Promise<boolean>;

    "stakingPaused()"(overrides?: CallOverrides): Promise<boolean>;

    sync(overrides?: CallOverrides): Promise<void>;

    "sync()"(overrides?: CallOverrides): Promise<void>;

    toggleRewardsCollection(overrides?: CallOverrides): Promise<void>;

    "toggleRewardsCollection()"(overrides?: CallOverrides): Promise<void>;

    toggleStaking(overrides?: CallOverrides): Promise<void>;

    "toggleStaking()"(overrides?: CallOverrides): Promise<void>;

    toggleWithdrawals(overrides?: CallOverrides): Promise<void>;

    "toggleWithdrawals()"(overrides?: CallOverrides): Promise<void>;

    totalCombinedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    "totalCombinedWeight()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalLiquidityLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLiquidityLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlockStakes(overrides?: CallOverrides): Promise<void>;

    "unlockStakes()"(overrides?: CallOverrides): Promise<void>;

    withdrawLocked(kek_id: BytesLike, overrides?: CallOverrides): Promise<void>;

    "withdrawLocked(bytes32)"(
      kek_id: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<boolean>;

    "withdrawalsPaused()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    DefaultInitialization(): TypedEventFilter<[], {}>;

    LockedStakeMaxMultiplierUpdated(
      multiplier: null
    ): TypedEventFilter<[BigNumber], { multiplier: BigNumber }>;

    LockedStakeMinTime(
      secs: null
    ): TypedEventFilter<[BigNumber], { secs: BigNumber }>;

    LockedStakeTimeForMaxMultiplier(
      secs: null
    ): TypedEventFilter<[BigNumber], { secs: BigNumber }>;

    OwnerChanged(
      oldOwner: null,
      newOwner: null
    ): TypedEventFilter<
      [string, string],
      { oldOwner: string; newOwner: string }
    >;

    OwnerNominated(
      newOwner: null
    ): TypedEventFilter<[string], { newOwner: string }>;

    Recovered(
      destination_address: null,
      token: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { destination_address: string; token: string; amount: BigNumber }
    >;

    RewardPaid(
      user: string | null,
      reward: null,
      token_address: null,
      destination_address: null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      {
        user: string;
        reward: BigNumber;
        token_address: string;
        destination_address: string;
      }
    >;

    RewardsDurationUpdated(
      newDuration: null
    ): TypedEventFilter<[BigNumber], { newDuration: BigNumber }>;

    RewardsPeriodRenewed(
      token: null
    ): TypedEventFilter<[string], { token: string }>;

    StakeLocked(
      user: string | null,
      amount: null,
      secs: null,
      kek_id: null,
      source_address: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string],
      {
        user: string;
        amount: BigNumber;
        secs: BigNumber;
        kek_id: string;
        source_address: string;
      }
    >;

    WithdrawLocked(
      user: string | null,
      amount: null,
      kek_id: null,
      destination_address: null
    ): TypedEventFilter<
      [string, BigNumber, string, string],
      {
        user: string;
        amount: BigNumber;
        kek_id: string;
        destination_address: string;
      }
    >;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcCurCombinedWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcCurCombinedWeight(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeTokenManager(
      reward_token_address: string,
      new_manager_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeTokenManager(address,address)"(
      reward_token_address: string,
      new_manager_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    combinedWeightOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "combinedWeightOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllRewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllRewardTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRewardForDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardForDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardSymbols(overrides?: CallOverrides): Promise<BigNumber>;

    "getRewardSymbols()"(overrides?: CallOverrides): Promise<BigNumber>;

    greylist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "greylist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    greylistAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "greylistAddress(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeDefault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initializeDefault()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTokenManagerFor(
      caller_addr: string,
      reward_token_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isTokenManagerFor(address,address)"(
      caller_addr: string,
      reward_token_addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockMultiplier(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockMultiplier(uint256)"(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "lock_max_multiplier()"(overrides?: CallOverrides): Promise<BigNumber>;

    lock_time_for_max_multiplier(overrides?: CallOverrides): Promise<BigNumber>;

    "lock_time_for_max_multiplier()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock_time_min(overrides?: CallOverrides): Promise<BigNumber>;

    "lock_time_min()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedLiquidityOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedLiquidityOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedStakesOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedStakesOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    "periodFinish()"(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardManagers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rewardManagers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardRates(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardSymbols(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardSymbols(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokenAddrToIdx(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardTokenAddrToIdx(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardsCollectionPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsCollectionPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardsPerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    setLockedStakeTimeForMinAndMaxMultiplier(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLockedStakeTimeForMinAndMaxMultiplier(uint256,uint256)"(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMultipliers(
      _lock_max_multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMultipliers(uint256)"(
      _lock_max_multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardRate(
      reward_token_address: string,
      new_rate: BigNumberish,
      sync_too: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRewardRate(address,uint256,bool)"(
      reward_token_address: string,
      new_rate: BigNumberish,
      sync_too: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardsDuration(
      _rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRewardsDuration(uint256)"(
      _rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeLocked(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stakeLocked(uint256,uint256)"(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakesUnlocked(overrides?: CallOverrides): Promise<BigNumber>;

    "stakesUnlocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakingPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sync()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleRewardsCollection(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toggleRewardsCollection()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleStaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toggleStaking()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    toggleWithdrawals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "toggleWithdrawals()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalCombinedWeight(overrides?: CallOverrides): Promise<BigNumber>;

    "totalCombinedWeight()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalLiquidityLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLiquidityLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlockStakes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unlockStakes()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLocked(
      kek_id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawLocked(bytes32)"(
      kek_id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalsPaused()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcCurCombinedWeight(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcCurCombinedWeight(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeTokenManager(
      reward_token_address: string,
      new_manager_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeTokenManager(address,address)"(
      reward_token_address: string,
      new_manager_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    combinedWeightOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "combinedWeightOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllRewardTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAllRewardTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getReward()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRewardForDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRewardForDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardSymbols(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRewardSymbols()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    greylist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "greylist(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    greylistAddress(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "greylistAddress(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeDefault(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initializeDefault()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTokenManagerFor(
      caller_addr: string,
      reward_token_addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTokenManagerFor(address,address)"(
      caller_addr: string,
      reward_token_addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastUpdateTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockMultiplier(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockMultiplier(uint256)"(
      secs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock_max_multiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lock_max_multiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock_time_for_max_multiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lock_time_for_max_multiplier()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock_time_min(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lock_time_min()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedLiquidityOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockedLiquidityOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedStakesOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockedStakesOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nominatedOwner()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodFinish()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "recoverERC20(address,uint256)"(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardManagers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardManagers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardRates(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardSymbols(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardSymbols(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokenAddrToIdx(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardTokenAddrToIdx(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsCollectionPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardsCollectionPaused()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsDuration()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardsPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardsPerToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLockedStakeTimeForMinAndMaxMultiplier(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLockedStakeTimeForMinAndMaxMultiplier(uint256,uint256)"(
      _lock_time_for_max_multiplier: BigNumberish,
      _lock_time_min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMultipliers(
      _lock_max_multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMultipliers(uint256)"(
      _lock_max_multiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardRate(
      reward_token_address: string,
      new_rate: BigNumberish,
      sync_too: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRewardRate(address,uint256,bool)"(
      reward_token_address: string,
      new_rate: BigNumberish,
      sync_too: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardsDuration(
      _rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRewardsDuration(uint256)"(
      _rewardsDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeLocked(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stakeLocked(uint256,uint256)"(
      liquidity: BigNumberish,
      secs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakesUnlocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakesUnlocked()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingPaused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sync()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleRewardsCollection(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toggleRewardsCollection()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleStaking(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toggleStaking()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    toggleWithdrawals(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "toggleWithdrawals()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalCombinedWeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalCombinedWeight()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLiquidityLocked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalLiquidityLocked()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockStakes(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unlockStakes()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLocked(
      kek_id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawLocked(bytes32)"(
      kek_id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalsPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "withdrawalsPaused()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
