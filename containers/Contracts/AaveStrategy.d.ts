/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface AaveStrategyInterface extends ethers.utils.Interface {
  functions: {
    "REFERRAL_CODE()": FunctionFragment;
    "addKeeper(address)": FunctionFragment;
    "amdai()": FunctionFragment;
    "balanceOf()": FunctionFragment;
    "balanceOfPool()": FunctionFragment;
    "balanceOfWant()": FunctionFragment;
    "controller()": FunctionFragment;
    "dai()": FunctionFragment;
    "daiColFactor()": FunctionFragment;
    "deleverageToMin()": FunctionFragment;
    "deleverageUntil(uint256)": FunctionFragment;
    "deposit()": FunctionFragment;
    "execute(address,bytes)": FunctionFragment;
    "getBorrowable()": FunctionFragment;
    "getBorrowed()": FunctionFragment;
    "getBorrowedView()": FunctionFragment;
    "getColFactor()": FunctionFragment;
    "getCurrentLeverage()": FunctionFragment;
    "getLeveragedSupplyTarget(uint256)": FunctionFragment;
    "getMarketColFactor()": FunctionFragment;
    "getMaticAccrued()": FunctionFragment;
    "getMaxLeverage()": FunctionFragment;
    "getName()": FunctionFragment;
    "getRedeemable()": FunctionFragment;
    "getSafeLeverageColFactor()": FunctionFragment;
    "getSupplied()": FunctionFragment;
    "getSuppliedUnleveraged()": FunctionFragment;
    "getSuppliedView()": FunctionFragment;
    "governance()": FunctionFragment;
    "harvest()": FunctionFragment;
    "harvesters(address)": FunctionFragment;
    "incentivesController()": FunctionFragment;
    "lendingPool()": FunctionFragment;
    "leverageToMax()": FunctionFragment;
    "leverageUntil(uint256)": FunctionFragment;
    "performanceDevFee()": FunctionFragment;
    "performanceDevMax()": FunctionFragment;
    "performanceTreasuryFee()": FunctionFragment;
    "performanceTreasuryMax()": FunctionFragment;
    "removeKeeper(address)": FunctionFragment;
    "revokeHarvesters(address[])": FunctionFragment;
    "setColFactorLeverageBuffer(uint256)": FunctionFragment;
    "setController(address)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setMarketColFactor(uint256)": FunctionFragment;
    "setPerformanceDevFee(uint256)": FunctionFragment;
    "setPerformanceTreasuryFee(uint256)": FunctionFragment;
    "setStrategist(address)": FunctionFragment;
    "setTimelock(address)": FunctionFragment;
    "setWithdrawalDevFundFee(uint256)": FunctionFragment;
    "setWithdrawalTreasuryFee(uint256)": FunctionFragment;
    "stableDebtDai()": FunctionFragment;
    "strategist()": FunctionFragment;
    "sync()": FunctionFragment;
    "timelock()": FunctionFragment;
    "univ2Router2()": FunctionFragment;
    "variableDebtDai()": FunctionFragment;
    "want()": FunctionFragment;
    "weth()": FunctionFragment;
    "whitelistHarvesters(address[])": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
    "withdrawForSwap(uint256)": FunctionFragment;
    "withdrawalDevFundFee()": FunctionFragment;
    "withdrawalDevFundMax()": FunctionFragment;
    "withdrawalTreasuryFee()": FunctionFragment;
    "withdrawalTreasuryMax()": FunctionFragment;
    "wmatic()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "REFERRAL_CODE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addKeeper", values: [string]): string;
  encodeFunctionData(functionFragment: "amdai", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOfPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfWant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dai", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "daiColFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleverageToMin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleverageUntil",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowedView",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getColFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentLeverage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLeveragedSupplyTarget",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketColFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaticAccrued",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxLeverage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRedeemable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSafeLeverageColFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupplied",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSuppliedUnleveraged",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSuppliedView",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(functionFragment: "harvesters", values: [string]): string;
  encodeFunctionData(
    functionFragment: "incentivesController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lendingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leverageToMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leverageUntil",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "performanceDevFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performanceDevMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performanceTreasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performanceTreasuryMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeKeeper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeHarvesters",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setColFactorLeverageBuffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketColFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerformanceDevFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerformanceTreasuryFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategist",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setTimelock", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalDevFundFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalTreasuryFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stableDebtDai",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strategist",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "univ2Router2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "variableDebtDai",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "want", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whitelistHarvesters",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawForSwap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalDevFundFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalDevFundMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalTreasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalTreasuryMax",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wmatic", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "REFERRAL_CODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addKeeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "amdai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfWant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dai", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daiColFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleverageToMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleverageUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowedView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getColFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeveragedSupplyTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketColFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaticAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRedeemable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSafeLeverageColFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupplied",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSuppliedUnleveraged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSuppliedView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvesters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incentivesController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leverageToMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leverageUntil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceDevFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceDevMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performanceTreasuryMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeHarvesters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setColFactorLeverageBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketColFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceDevFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalDevFundFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableDebtDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "univ2Router2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "variableDebtDai",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "want", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistHarvesters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawForSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalDevFundFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalDevFundMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalTreasuryMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wmatic", data: BytesLike): Result;

  events: {};
}

export class AaveStrategy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AaveStrategyInterface;

  functions: {
    REFERRAL_CODE(overrides?: CallOverrides): Promise<[number]>;

    "REFERRAL_CODE()"(overrides?: CallOverrides): Promise<[number]>;

    addKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addKeeper(address)"(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    amdai(overrides?: CallOverrides): Promise<[string]>;

    "amdai()"(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfPool(overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOfPool()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfWant(overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    "controller()"(overrides?: CallOverrides): Promise<[string]>;

    dai(overrides?: CallOverrides): Promise<[string]>;

    "dai()"(overrides?: CallOverrides): Promise<[string]>;

    daiColFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "daiColFactor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deleverageToMin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deleverageToMin()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleverageUntil(
      _supplyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deleverageUntil(uint256)"(
      _supplyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "execute(address,bytes)"(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBorrowable(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getBorrowable()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBorrowed(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getBorrowed()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBorrowedView(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getBorrowedView()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getColFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getColFactor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentLeverage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCurrentLeverage()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLeveragedSupplyTarget(
      supplyBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getLeveragedSupplyTarget(uint256)"(
      supplyBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarketColFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getMarketColFactor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaticAccrued(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getMaticAccrued()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaxLeverage(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getMaxLeverage()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getName(overrides?: CallOverrides): Promise<[string]>;

    "getName()"(overrides?: CallOverrides): Promise<[string]>;

    getRedeemable(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getRedeemable()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSafeLeverageColFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getSafeLeverageColFactor()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSupplied(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getSupplied()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSuppliedUnleveraged(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getSuppliedUnleveraged()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSuppliedView(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getSuppliedView()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    "governance()"(overrides?: CallOverrides): Promise<[string]>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvesters(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "harvesters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    incentivesController(overrides?: CallOverrides): Promise<[string]>;

    "incentivesController()"(overrides?: CallOverrides): Promise<[string]>;

    lendingPool(overrides?: CallOverrides): Promise<[string]>;

    "lendingPool()"(overrides?: CallOverrides): Promise<[string]>;

    leverageToMax(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "leverageToMax()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    leverageUntil(
      _supplyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "leverageUntil(uint256)"(
      _supplyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    performanceDevFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "performanceDevFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    performanceDevMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    "performanceDevMax()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    performanceTreasuryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "performanceTreasuryFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    performanceTreasuryMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    "performanceTreasuryMax()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeKeeper(address)"(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeHarvesters(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revokeHarvesters(address[])"(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setColFactorLeverageBuffer(
      _colFactorLeverageBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setColFactorLeverageBuffer(uint256)"(
      _colFactorLeverageBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketColFactor(
      _daiColFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMarketColFactor(uint256)"(
      _daiColFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerformanceDevFee(
      _performanceDevFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPerformanceDevFee(uint256)"(
      _performanceDevFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPerformanceTreasuryFee(
      _performanceTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPerformanceTreasuryFee(uint256)"(
      _performanceTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTimelock(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalDevFundFee(
      _withdrawalDevFundFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setWithdrawalDevFundFee(uint256)"(
      _withdrawalDevFundFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWithdrawalTreasuryFee(
      _withdrawalTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setWithdrawalTreasuryFee(uint256)"(
      _withdrawalTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stableDebtDai(overrides?: CallOverrides): Promise<[string]>;

    "stableDebtDai()"(overrides?: CallOverrides): Promise<[string]>;

    strategist(overrides?: CallOverrides): Promise<[string]>;

    "strategist()"(overrides?: CallOverrides): Promise<[string]>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sync()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    "timelock()"(overrides?: CallOverrides): Promise<[string]>;

    univ2Router2(overrides?: CallOverrides): Promise<[string]>;

    "univ2Router2()"(overrides?: CallOverrides): Promise<[string]>;

    variableDebtDai(overrides?: CallOverrides): Promise<[string]>;

    "variableDebtDai()"(overrides?: CallOverrides): Promise<[string]>;

    want(overrides?: CallOverrides): Promise<[string]>;

    "want()"(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    "weth()"(overrides?: CallOverrides): Promise<[string]>;

    whitelistHarvesters(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "whitelistHarvesters(address[])"(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(address)"(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawAll()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawForSwap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawForSwap(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawalDevFundFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "withdrawalDevFundFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalDevFundMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    "withdrawalDevFundMax()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalTreasuryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "withdrawalTreasuryFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalTreasuryMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    "withdrawalTreasuryMax()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    wmatic(overrides?: CallOverrides): Promise<[string]>;

    "wmatic()"(overrides?: CallOverrides): Promise<[string]>;
  };

  REFERRAL_CODE(overrides?: CallOverrides): Promise<number>;

  "REFERRAL_CODE()"(overrides?: CallOverrides): Promise<number>;

  addKeeper(
    _keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addKeeper(address)"(
    _keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  amdai(overrides?: CallOverrides): Promise<string>;

  "amdai()"(overrides?: CallOverrides): Promise<string>;

  balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOfPool()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOfWant()"(overrides?: CallOverrides): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  "controller()"(overrides?: CallOverrides): Promise<string>;

  dai(overrides?: CallOverrides): Promise<string>;

  "dai()"(overrides?: CallOverrides): Promise<string>;

  daiColFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "daiColFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  deleverageToMin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deleverageToMin()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleverageUntil(
    _supplyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deleverageUntil(uint256)"(
    _supplyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    _target: string,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "execute(address,bytes)"(
    _target: string,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBorrowable(overrides?: CallOverrides): Promise<BigNumber>;

  "getBorrowable()"(overrides?: CallOverrides): Promise<BigNumber>;

  getBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

  "getBorrowed()"(overrides?: CallOverrides): Promise<BigNumber>;

  getBorrowedView(overrides?: CallOverrides): Promise<BigNumber>;

  "getBorrowedView()"(overrides?: CallOverrides): Promise<BigNumber>;

  getColFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "getColFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentLeverage(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentLeverage()"(overrides?: CallOverrides): Promise<BigNumber>;

  getLeveragedSupplyTarget(
    supplyBalance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLeveragedSupplyTarget(uint256)"(
    supplyBalance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketColFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "getMarketColFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMaticAccrued(overrides?: CallOverrides): Promise<BigNumber>;

  "getMaticAccrued()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxLeverage(overrides?: CallOverrides): Promise<BigNumber>;

  "getMaxLeverage()"(overrides?: CallOverrides): Promise<BigNumber>;

  getName(overrides?: CallOverrides): Promise<string>;

  "getName()"(overrides?: CallOverrides): Promise<string>;

  getRedeemable(overrides?: CallOverrides): Promise<BigNumber>;

  "getRedeemable()"(overrides?: CallOverrides): Promise<BigNumber>;

  getSafeLeverageColFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "getSafeLeverageColFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  getSupplied(overrides?: CallOverrides): Promise<BigNumber>;

  "getSupplied()"(overrides?: CallOverrides): Promise<BigNumber>;

  getSuppliedUnleveraged(overrides?: CallOverrides): Promise<BigNumber>;

  "getSuppliedUnleveraged()"(overrides?: CallOverrides): Promise<BigNumber>;

  getSuppliedView(overrides?: CallOverrides): Promise<BigNumber>;

  "getSuppliedView()"(overrides?: CallOverrides): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  harvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvest()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvesters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "harvesters(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  incentivesController(overrides?: CallOverrides): Promise<string>;

  "incentivesController()"(overrides?: CallOverrides): Promise<string>;

  lendingPool(overrides?: CallOverrides): Promise<string>;

  "lendingPool()"(overrides?: CallOverrides): Promise<string>;

  leverageToMax(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "leverageToMax()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  leverageUntil(
    _supplyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "leverageUntil(uint256)"(
    _supplyAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  performanceDevFee(overrides?: CallOverrides): Promise<BigNumber>;

  "performanceDevFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  performanceDevMax(overrides?: CallOverrides): Promise<BigNumber>;

  "performanceDevMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  performanceTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

  "performanceTreasuryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  performanceTreasuryMax(overrides?: CallOverrides): Promise<BigNumber>;

  "performanceTreasuryMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  removeKeeper(
    _keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeKeeper(address)"(
    _keeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeHarvesters(
    _harvesters: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revokeHarvesters(address[])"(
    _harvesters: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setColFactorLeverageBuffer(
    _colFactorLeverageBuffer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setColFactorLeverageBuffer(uint256)"(
    _colFactorLeverageBuffer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setController(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setController(address)"(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setGovernance(address)"(
    _governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketColFactor(
    _daiColFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMarketColFactor(uint256)"(
    _daiColFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerformanceDevFee(
    _performanceDevFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPerformanceDevFee(uint256)"(
    _performanceDevFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPerformanceTreasuryFee(
    _performanceTreasuryFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPerformanceTreasuryFee(uint256)"(
    _performanceTreasuryFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStrategist(
    _strategist: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setStrategist(address)"(
    _strategist: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTimelock(
    _timelock: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTimelock(address)"(
    _timelock: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalDevFundFee(
    _withdrawalDevFundFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setWithdrawalDevFundFee(uint256)"(
    _withdrawalDevFundFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWithdrawalTreasuryFee(
    _withdrawalTreasuryFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setWithdrawalTreasuryFee(uint256)"(
    _withdrawalTreasuryFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stableDebtDai(overrides?: CallOverrides): Promise<string>;

  "stableDebtDai()"(overrides?: CallOverrides): Promise<string>;

  strategist(overrides?: CallOverrides): Promise<string>;

  "strategist()"(overrides?: CallOverrides): Promise<string>;

  sync(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sync()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timelock(overrides?: CallOverrides): Promise<string>;

  "timelock()"(overrides?: CallOverrides): Promise<string>;

  univ2Router2(overrides?: CallOverrides): Promise<string>;

  "univ2Router2()"(overrides?: CallOverrides): Promise<string>;

  variableDebtDai(overrides?: CallOverrides): Promise<string>;

  "variableDebtDai()"(overrides?: CallOverrides): Promise<string>;

  want(overrides?: CallOverrides): Promise<string>;

  "want()"(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  whitelistHarvesters(
    _harvesters: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "whitelistHarvesters(address[])"(
    _harvesters: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(address)"(
    _asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawAll()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawForSwap(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawForSwap(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawalDevFundFee(overrides?: CallOverrides): Promise<BigNumber>;

  "withdrawalDevFundFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalDevFundMax(overrides?: CallOverrides): Promise<BigNumber>;

  "withdrawalDevFundMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

  "withdrawalTreasuryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalTreasuryMax(overrides?: CallOverrides): Promise<BigNumber>;

  "withdrawalTreasuryMax()"(overrides?: CallOverrides): Promise<BigNumber>;

  wmatic(overrides?: CallOverrides): Promise<string>;

  "wmatic()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    REFERRAL_CODE(overrides?: CallOverrides): Promise<number>;

    "REFERRAL_CODE()"(overrides?: CallOverrides): Promise<number>;

    addKeeper(_keeper: string, overrides?: CallOverrides): Promise<void>;

    "addKeeper(address)"(
      _keeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    amdai(overrides?: CallOverrides): Promise<string>;

    "amdai()"(overrides?: CallOverrides): Promise<string>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    "controller()"(overrides?: CallOverrides): Promise<string>;

    dai(overrides?: CallOverrides): Promise<string>;

    "dai()"(overrides?: CallOverrides): Promise<string>;

    daiColFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "daiColFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    deleverageToMin(overrides?: CallOverrides): Promise<void>;

    "deleverageToMin()"(overrides?: CallOverrides): Promise<void>;

    deleverageUntil(
      _supplyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deleverageUntil(uint256)"(
      _supplyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(overrides?: CallOverrides): Promise<void>;

    "deposit()"(overrides?: CallOverrides): Promise<void>;

    execute(
      _target: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "execute(address,bytes)"(
      _target: string,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getBorrowable(overrides?: CallOverrides): Promise<BigNumber>;

    "getBorrowable()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    "getBorrowed()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowedView(overrides?: CallOverrides): Promise<BigNumber>;

    "getBorrowedView()"(overrides?: CallOverrides): Promise<BigNumber>;

    getColFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "getColFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentLeverage()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLeveragedSupplyTarget(
      supplyBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLeveragedSupplyTarget(uint256)"(
      supplyBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketColFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "getMarketColFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaticAccrued(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaticAccrued()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaxLeverage()"(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<string>;

    "getName()"(overrides?: CallOverrides): Promise<string>;

    getRedeemable(overrides?: CallOverrides): Promise<BigNumber>;

    "getRedeemable()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSafeLeverageColFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "getSafeLeverageColFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSupplied(overrides?: CallOverrides): Promise<BigNumber>;

    "getSupplied()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSuppliedUnleveraged(overrides?: CallOverrides): Promise<BigNumber>;

    "getSuppliedUnleveraged()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSuppliedView(overrides?: CallOverrides): Promise<BigNumber>;

    "getSuppliedView()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    harvest(overrides?: CallOverrides): Promise<void>;

    "harvest()"(overrides?: CallOverrides): Promise<void>;

    harvesters(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "harvesters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    incentivesController(overrides?: CallOverrides): Promise<string>;

    "incentivesController()"(overrides?: CallOverrides): Promise<string>;

    lendingPool(overrides?: CallOverrides): Promise<string>;

    "lendingPool()"(overrides?: CallOverrides): Promise<string>;

    leverageToMax(overrides?: CallOverrides): Promise<void>;

    "leverageToMax()"(overrides?: CallOverrides): Promise<void>;

    leverageUntil(
      _supplyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "leverageUntil(uint256)"(
      _supplyAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    performanceDevFee(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceDevFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    performanceDevMax(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceDevMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    performanceTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceTreasuryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    performanceTreasuryMax(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceTreasuryMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeKeeper(_keeper: string, overrides?: CallOverrides): Promise<void>;

    "removeKeeper(address)"(
      _keeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeHarvesters(
      _harvesters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeHarvesters(address[])"(
      _harvesters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setColFactorLeverageBuffer(
      _colFactorLeverageBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setColFactorLeverageBuffer(uint256)"(
      _colFactorLeverageBuffer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setController(address)"(
      _controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketColFactor(
      _daiColFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setMarketColFactor(uint256)"(
      _daiColFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setPerformanceDevFee(
      _performanceDevFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPerformanceDevFee(uint256)"(
      _performanceDevFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerformanceTreasuryFee(
      _performanceTreasuryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPerformanceTreasuryFee(uint256)"(
      _performanceTreasuryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategist(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimelock(_timelock: string, overrides?: CallOverrides): Promise<void>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalDevFundFee(
      _withdrawalDevFundFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWithdrawalDevFundFee(uint256)"(
      _withdrawalDevFundFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalTreasuryFee(
      _withdrawalTreasuryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWithdrawalTreasuryFee(uint256)"(
      _withdrawalTreasuryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stableDebtDai(overrides?: CallOverrides): Promise<string>;

    "stableDebtDai()"(overrides?: CallOverrides): Promise<string>;

    strategist(overrides?: CallOverrides): Promise<string>;

    "strategist()"(overrides?: CallOverrides): Promise<string>;

    sync(overrides?: CallOverrides): Promise<boolean>;

    "sync()"(overrides?: CallOverrides): Promise<boolean>;

    timelock(overrides?: CallOverrides): Promise<string>;

    "timelock()"(overrides?: CallOverrides): Promise<string>;

    univ2Router2(overrides?: CallOverrides): Promise<string>;

    "univ2Router2()"(overrides?: CallOverrides): Promise<string>;

    variableDebtDai(overrides?: CallOverrides): Promise<string>;

    "variableDebtDai()"(overrides?: CallOverrides): Promise<string>;

    want(overrides?: CallOverrides): Promise<string>;

    "want()"(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;

    whitelistHarvesters(
      _harvesters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "whitelistHarvesters(address[])"(
      _harvesters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address)"(
      _asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAll(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawAll()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawForSwap(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawForSwap(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalDevFundFee(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalDevFundFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalDevFundMax(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalDevFundMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalTreasuryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalTreasuryMax(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalTreasuryMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    wmatic(overrides?: CallOverrides): Promise<string>;

    "wmatic()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    REFERRAL_CODE(overrides?: CallOverrides): Promise<BigNumber>;

    "REFERRAL_CODE()"(overrides?: CallOverrides): Promise<BigNumber>;

    addKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addKeeper(address)"(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    amdai(overrides?: CallOverrides): Promise<BigNumber>;

    "amdai()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfPool(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfWant(overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    "controller()"(overrides?: CallOverrides): Promise<BigNumber>;

    dai(overrides?: CallOverrides): Promise<BigNumber>;

    "dai()"(overrides?: CallOverrides): Promise<BigNumber>;

    daiColFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "daiColFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    deleverageToMin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deleverageToMin()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleverageUntil(
      _supplyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deleverageUntil(uint256)"(
      _supplyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "execute(address,bytes)"(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBorrowable(overrides?: CallOverrides): Promise<BigNumber>;

    "getBorrowable()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    "getBorrowed()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowedView(overrides?: CallOverrides): Promise<BigNumber>;

    "getBorrowedView()"(overrides?: CallOverrides): Promise<BigNumber>;

    getColFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "getColFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentLeverage()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLeveragedSupplyTarget(
      supplyBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLeveragedSupplyTarget(uint256)"(
      supplyBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketColFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "getMarketColFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaticAccrued(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaticAccrued()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMaxLeverage(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaxLeverage()"(overrides?: CallOverrides): Promise<BigNumber>;

    getName(overrides?: CallOverrides): Promise<BigNumber>;

    "getName()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRedeemable(overrides?: CallOverrides): Promise<BigNumber>;

    "getRedeemable()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSafeLeverageColFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "getSafeLeverageColFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSupplied(overrides?: CallOverrides): Promise<BigNumber>;

    "getSupplied()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSuppliedUnleveraged(overrides?: CallOverrides): Promise<BigNumber>;

    "getSuppliedUnleveraged()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSuppliedView(overrides?: CallOverrides): Promise<BigNumber>;

    "getSuppliedView()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvesters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "harvesters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incentivesController(overrides?: CallOverrides): Promise<BigNumber>;

    "incentivesController()"(overrides?: CallOverrides): Promise<BigNumber>;

    lendingPool(overrides?: CallOverrides): Promise<BigNumber>;

    "lendingPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    leverageToMax(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "leverageToMax()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    leverageUntil(
      _supplyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "leverageUntil(uint256)"(
      _supplyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    performanceDevFee(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceDevFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    performanceDevMax(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceDevMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    performanceTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceTreasuryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    performanceTreasuryMax(overrides?: CallOverrides): Promise<BigNumber>;

    "performanceTreasuryMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeKeeper(address)"(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeHarvesters(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revokeHarvesters(address[])"(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setColFactorLeverageBuffer(
      _colFactorLeverageBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setColFactorLeverageBuffer(uint256)"(
      _colFactorLeverageBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketColFactor(
      _daiColFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMarketColFactor(uint256)"(
      _daiColFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerformanceDevFee(
      _performanceDevFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPerformanceDevFee(uint256)"(
      _performanceDevFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPerformanceTreasuryFee(
      _performanceTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPerformanceTreasuryFee(uint256)"(
      _performanceTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTimelock(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawalDevFundFee(
      _withdrawalDevFundFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setWithdrawalDevFundFee(uint256)"(
      _withdrawalDevFundFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWithdrawalTreasuryFee(
      _withdrawalTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setWithdrawalTreasuryFee(uint256)"(
      _withdrawalTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stableDebtDai(overrides?: CallOverrides): Promise<BigNumber>;

    "stableDebtDai()"(overrides?: CallOverrides): Promise<BigNumber>;

    strategist(overrides?: CallOverrides): Promise<BigNumber>;

    "strategist()"(overrides?: CallOverrides): Promise<BigNumber>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sync()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    "timelock()"(overrides?: CallOverrides): Promise<BigNumber>;

    univ2Router2(overrides?: CallOverrides): Promise<BigNumber>;

    "univ2Router2()"(overrides?: CallOverrides): Promise<BigNumber>;

    variableDebtDai(overrides?: CallOverrides): Promise<BigNumber>;

    "variableDebtDai()"(overrides?: CallOverrides): Promise<BigNumber>;

    want(overrides?: CallOverrides): Promise<BigNumber>;

    "want()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistHarvesters(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "whitelistHarvesters(address[])"(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(address)"(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawAll()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawForSwap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawForSwap(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawalDevFundFee(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalDevFundFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalDevFundMax(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalDevFundMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalTreasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalTreasuryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalTreasuryMax(overrides?: CallOverrides): Promise<BigNumber>;

    "withdrawalTreasuryMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    wmatic(overrides?: CallOverrides): Promise<BigNumber>;

    "wmatic()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    REFERRAL_CODE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "REFERRAL_CODE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addKeeper(address)"(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    amdai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "amdai()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceOf()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceOfPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfWant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balanceOfWant()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "controller()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dai()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daiColFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "daiColFactor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deleverageToMin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deleverageToMin()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleverageUntil(
      _supplyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deleverageUntil(uint256)"(
      _supplyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "execute(address,bytes)"(
      _target: string,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBorrowable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBorrowable()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBorrowed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBorrowedView(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBorrowedView()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getColFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getColFactor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentLeverage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentLeverage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLeveragedSupplyTarget(
      supplyBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLeveragedSupplyTarget(uint256)"(
      supplyBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketColFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketColFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaticAccrued(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMaticAccrued()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxLeverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMaxLeverage()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRedeemable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRedeemable()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSafeLeverageColFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSafeLeverageColFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupplied(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSupplied()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSuppliedUnleveraged(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSuppliedUnleveraged()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSuppliedView(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSuppliedView()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvesters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "harvesters(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incentivesController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "incentivesController()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lendingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lendingPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leverageToMax(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "leverageToMax()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    leverageUntil(
      _supplyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "leverageUntil(uint256)"(
      _supplyAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    performanceDevFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "performanceDevFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performanceDevMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "performanceDevMax()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performanceTreasuryFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "performanceTreasuryFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performanceTreasuryMax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "performanceTreasuryMax()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeKeeper(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeKeeper(address)"(
      _keeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeHarvesters(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revokeHarvesters(address[])"(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setColFactorLeverageBuffer(
      _colFactorLeverageBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setColFactorLeverageBuffer(uint256)"(
      _colFactorLeverageBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setController(address)"(
      _controller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setGovernance(address)"(
      _governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketColFactor(
      _daiColFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMarketColFactor(uint256)"(
      _daiColFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerformanceDevFee(
      _performanceDevFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPerformanceDevFee(uint256)"(
      _performanceDevFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPerformanceTreasuryFee(
      _performanceTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPerformanceTreasuryFee(uint256)"(
      _performanceTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStrategist(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setStrategist(address)"(
      _strategist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTimelock(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTimelock(address)"(
      _timelock: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalDevFundFee(
      _withdrawalDevFundFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setWithdrawalDevFundFee(uint256)"(
      _withdrawalDevFundFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWithdrawalTreasuryFee(
      _withdrawalTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setWithdrawalTreasuryFee(uint256)"(
      _withdrawalTreasuryFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stableDebtDai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stableDebtDai()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strategist()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sync()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timelock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    univ2Router2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "univ2Router2()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    variableDebtDai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "variableDebtDai()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    want(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "want()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistHarvesters(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "whitelistHarvesters(address[])"(
      _harvesters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(address)"(
      _asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawAll()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawForSwap(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawForSwap(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalDevFundFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawalDevFundFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalDevFundMax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawalDevFundMax()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalTreasuryFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawalTreasuryFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalTreasuryMax(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdrawalTreasuryMax()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wmatic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wmatic()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
