/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface InstabrineInterface extends ethers.utils.Interface {
  functions: {
    "curvePickleJarToPrimitive_1(address,uint256,address,address,int128,address)": FunctionFragment;
    "curvePickleJarToPrimitive_2(address,uint256,address,address,address[2])": FunctionFragment;
    "curvePickleJarToPrimitive_3(address,uint256,address,address,address[3])": FunctionFragment;
    "curvePickleJarToPrimitive_4(address,uint256,address,address,address[4])": FunctionFragment;
    "emergencyERC20Retrieve(address)": FunctionFragment;
    "pickleJarToPrimitive(address,uint256,address)": FunctionFragment;
    "primitiveToCurvePickleJar_2(address,address[2],uint256[2],address,address)": FunctionFragment;
    "primitiveToCurvePickleJar_3(address,address[3],uint256[3],address,address)": FunctionFragment;
    "primitiveToCurvePickleJar_4(address,address[4],uint256[4],address,address)": FunctionFragment;
    "primitiveToPickleJar(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "curvePickleJarToPrimitive_1",
    values: [string, BigNumberish, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "curvePickleJarToPrimitive_2",
    values: [string, BigNumberish, string, string, [string, string]]
  ): string;
  encodeFunctionData(
    functionFragment: "curvePickleJarToPrimitive_3",
    values: [string, BigNumberish, string, string, [string, string, string]]
  ): string;
  encodeFunctionData(
    functionFragment: "curvePickleJarToPrimitive_4",
    values: [
      string,
      BigNumberish,
      string,
      string,
      [string, string, string, string]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyERC20Retrieve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pickleJarToPrimitive",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "primitiveToCurvePickleJar_2",
    values: [
      string,
      [string, string],
      [BigNumberish, BigNumberish],
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "primitiveToCurvePickleJar_3",
    values: [
      string,
      [string, string, string],
      [BigNumberish, BigNumberish, BigNumberish],
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "primitiveToCurvePickleJar_4",
    values: [
      string,
      [string, string, string, string],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "primitiveToPickleJar",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "curvePickleJarToPrimitive_1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curvePickleJarToPrimitive_2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curvePickleJarToPrimitive_3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curvePickleJarToPrimitive_4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyERC20Retrieve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pickleJarToPrimitive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primitiveToCurvePickleJar_2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primitiveToCurvePickleJar_3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primitiveToCurvePickleJar_4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primitiveToPickleJar",
    data: BytesLike
  ): Result;

  events: {};
}

export class Instabrine extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: InstabrineInterface;

  functions: {
    curvePickleJarToPrimitive_1(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      index: BigNumberish,
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "curvePickleJarToPrimitive_1(address,uint256,address,address,int128,address)"(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      index: BigNumberish,
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    curvePickleJarToPrimitive_2(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "curvePickleJarToPrimitive_2(address,uint256,address,address,address[2])"(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    curvePickleJarToPrimitive_3(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "curvePickleJarToPrimitive_3(address,uint256,address,address,address[3])"(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    curvePickleJarToPrimitive_4(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string, string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "curvePickleJarToPrimitive_4(address,uint256,address,address,address[4])"(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string, string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyERC20Retrieve(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "emergencyERC20Retrieve(address)"(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pickleJarToPrimitive(
      jar: string,
      amount: BigNumberish,
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pickleJarToPrimitive(address,uint256,address)"(
      jar: string,
      amount: BigNumberish,
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    primitiveToCurvePickleJar_2(
      curve: string,
      underlying: [string, string],
      underlyingAmounts: [BigNumberish, BigNumberish],
      curveLp: string,
      pickleJar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "primitiveToCurvePickleJar_2(address,address[2],uint256[2],address,address)"(
      curve: string,
      underlying: [string, string],
      underlyingAmounts: [BigNumberish, BigNumberish],
      curveLp: string,
      pickleJar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    primitiveToCurvePickleJar_3(
      curve: string,
      underlying: [string, string, string],
      underlyingAmounts: [BigNumberish, BigNumberish, BigNumberish],
      curveLp: string,
      pickleJar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "primitiveToCurvePickleJar_3(address,address[3],uint256[3],address,address)"(
      curve: string,
      underlying: [string, string, string],
      underlyingAmounts: [BigNumberish, BigNumberish, BigNumberish],
      curveLp: string,
      pickleJar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    primitiveToCurvePickleJar_4(
      curve: string,
      underlying: [string, string, string, string],
      underlyingAmounts: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      curveLp: string,
      pickleJar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "primitiveToCurvePickleJar_4(address,address[4],uint256[4],address,address)"(
      curve: string,
      underlying: [string, string, string, string],
      underlyingAmounts: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      curveLp: string,
      pickleJar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    primitiveToPickleJar(
      underlying: string,
      amount: BigNumberish,
      jar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "primitiveToPickleJar(address,uint256,address)"(
      underlying: string,
      amount: BigNumberish,
      jar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  curvePickleJarToPrimitive_1(
    pickleJar: string,
    amount: BigNumberish,
    curveLp: string,
    curve: string,
    index: BigNumberish,
    underlying: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "curvePickleJarToPrimitive_1(address,uint256,address,address,int128,address)"(
    pickleJar: string,
    amount: BigNumberish,
    curveLp: string,
    curve: string,
    index: BigNumberish,
    underlying: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  curvePickleJarToPrimitive_2(
    pickleJar: string,
    amount: BigNumberish,
    curveLp: string,
    curve: string,
    underlying: [string, string],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "curvePickleJarToPrimitive_2(address,uint256,address,address,address[2])"(
    pickleJar: string,
    amount: BigNumberish,
    curveLp: string,
    curve: string,
    underlying: [string, string],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  curvePickleJarToPrimitive_3(
    pickleJar: string,
    amount: BigNumberish,
    curveLp: string,
    curve: string,
    underlying: [string, string, string],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "curvePickleJarToPrimitive_3(address,uint256,address,address,address[3])"(
    pickleJar: string,
    amount: BigNumberish,
    curveLp: string,
    curve: string,
    underlying: [string, string, string],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  curvePickleJarToPrimitive_4(
    pickleJar: string,
    amount: BigNumberish,
    curveLp: string,
    curve: string,
    underlying: [string, string, string, string],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "curvePickleJarToPrimitive_4(address,uint256,address,address,address[4])"(
    pickleJar: string,
    amount: BigNumberish,
    curveLp: string,
    curve: string,
    underlying: [string, string, string, string],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyERC20Retrieve(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "emergencyERC20Retrieve(address)"(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pickleJarToPrimitive(
    jar: string,
    amount: BigNumberish,
    underlying: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pickleJarToPrimitive(address,uint256,address)"(
    jar: string,
    amount: BigNumberish,
    underlying: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  primitiveToCurvePickleJar_2(
    curve: string,
    underlying: [string, string],
    underlyingAmounts: [BigNumberish, BigNumberish],
    curveLp: string,
    pickleJar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "primitiveToCurvePickleJar_2(address,address[2],uint256[2],address,address)"(
    curve: string,
    underlying: [string, string],
    underlyingAmounts: [BigNumberish, BigNumberish],
    curveLp: string,
    pickleJar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  primitiveToCurvePickleJar_3(
    curve: string,
    underlying: [string, string, string],
    underlyingAmounts: [BigNumberish, BigNumberish, BigNumberish],
    curveLp: string,
    pickleJar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "primitiveToCurvePickleJar_3(address,address[3],uint256[3],address,address)"(
    curve: string,
    underlying: [string, string, string],
    underlyingAmounts: [BigNumberish, BigNumberish, BigNumberish],
    curveLp: string,
    pickleJar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  primitiveToCurvePickleJar_4(
    curve: string,
    underlying: [string, string, string, string],
    underlyingAmounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    curveLp: string,
    pickleJar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "primitiveToCurvePickleJar_4(address,address[4],uint256[4],address,address)"(
    curve: string,
    underlying: [string, string, string, string],
    underlyingAmounts: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    curveLp: string,
    pickleJar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  primitiveToPickleJar(
    underlying: string,
    amount: BigNumberish,
    jar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "primitiveToPickleJar(address,uint256,address)"(
    underlying: string,
    amount: BigNumberish,
    jar: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    curvePickleJarToPrimitive_1(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      index: BigNumberish,
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "curvePickleJarToPrimitive_1(address,uint256,address,address,int128,address)"(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      index: BigNumberish,
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    curvePickleJarToPrimitive_2(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "curvePickleJarToPrimitive_2(address,uint256,address,address,address[2])"(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    curvePickleJarToPrimitive_3(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string, string],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "curvePickleJarToPrimitive_3(address,uint256,address,address,address[3])"(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string, string],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    curvePickleJarToPrimitive_4(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string, string, string],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    "curvePickleJarToPrimitive_4(address,uint256,address,address,address[4])"(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string, string, string],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    emergencyERC20Retrieve(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyERC20Retrieve(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pickleJarToPrimitive(
      jar: string,
      amount: BigNumberish,
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pickleJarToPrimitive(address,uint256,address)"(
      jar: string,
      amount: BigNumberish,
      underlying: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    primitiveToCurvePickleJar_2(
      curve: string,
      underlying: [string, string],
      underlyingAmounts: [BigNumberish, BigNumberish],
      curveLp: string,
      pickleJar: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "primitiveToCurvePickleJar_2(address,address[2],uint256[2],address,address)"(
      curve: string,
      underlying: [string, string],
      underlyingAmounts: [BigNumberish, BigNumberish],
      curveLp: string,
      pickleJar: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    primitiveToCurvePickleJar_3(
      curve: string,
      underlying: [string, string, string],
      underlyingAmounts: [BigNumberish, BigNumberish, BigNumberish],
      curveLp: string,
      pickleJar: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "primitiveToCurvePickleJar_3(address,address[3],uint256[3],address,address)"(
      curve: string,
      underlying: [string, string, string],
      underlyingAmounts: [BigNumberish, BigNumberish, BigNumberish],
      curveLp: string,
      pickleJar: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    primitiveToCurvePickleJar_4(
      curve: string,
      underlying: [string, string, string, string],
      underlyingAmounts: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      curveLp: string,
      pickleJar: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "primitiveToCurvePickleJar_4(address,address[4],uint256[4],address,address)"(
      curve: string,
      underlying: [string, string, string, string],
      underlyingAmounts: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      curveLp: string,
      pickleJar: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    primitiveToPickleJar(
      underlying: string,
      amount: BigNumberish,
      jar: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "primitiveToPickleJar(address,uint256,address)"(
      underlying: string,
      amount: BigNumberish,
      jar: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    curvePickleJarToPrimitive_1(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      index: BigNumberish,
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "curvePickleJarToPrimitive_1(address,uint256,address,address,int128,address)"(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      index: BigNumberish,
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    curvePickleJarToPrimitive_2(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "curvePickleJarToPrimitive_2(address,uint256,address,address,address[2])"(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    curvePickleJarToPrimitive_3(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "curvePickleJarToPrimitive_3(address,uint256,address,address,address[3])"(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    curvePickleJarToPrimitive_4(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string, string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "curvePickleJarToPrimitive_4(address,uint256,address,address,address[4])"(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string, string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyERC20Retrieve(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "emergencyERC20Retrieve(address)"(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pickleJarToPrimitive(
      jar: string,
      amount: BigNumberish,
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pickleJarToPrimitive(address,uint256,address)"(
      jar: string,
      amount: BigNumberish,
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    primitiveToCurvePickleJar_2(
      curve: string,
      underlying: [string, string],
      underlyingAmounts: [BigNumberish, BigNumberish],
      curveLp: string,
      pickleJar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "primitiveToCurvePickleJar_2(address,address[2],uint256[2],address,address)"(
      curve: string,
      underlying: [string, string],
      underlyingAmounts: [BigNumberish, BigNumberish],
      curveLp: string,
      pickleJar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    primitiveToCurvePickleJar_3(
      curve: string,
      underlying: [string, string, string],
      underlyingAmounts: [BigNumberish, BigNumberish, BigNumberish],
      curveLp: string,
      pickleJar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "primitiveToCurvePickleJar_3(address,address[3],uint256[3],address,address)"(
      curve: string,
      underlying: [string, string, string],
      underlyingAmounts: [BigNumberish, BigNumberish, BigNumberish],
      curveLp: string,
      pickleJar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    primitiveToCurvePickleJar_4(
      curve: string,
      underlying: [string, string, string, string],
      underlyingAmounts: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      curveLp: string,
      pickleJar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "primitiveToCurvePickleJar_4(address,address[4],uint256[4],address,address)"(
      curve: string,
      underlying: [string, string, string, string],
      underlyingAmounts: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      curveLp: string,
      pickleJar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    primitiveToPickleJar(
      underlying: string,
      amount: BigNumberish,
      jar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "primitiveToPickleJar(address,uint256,address)"(
      underlying: string,
      amount: BigNumberish,
      jar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    curvePickleJarToPrimitive_1(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      index: BigNumberish,
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "curvePickleJarToPrimitive_1(address,uint256,address,address,int128,address)"(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      index: BigNumberish,
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    curvePickleJarToPrimitive_2(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "curvePickleJarToPrimitive_2(address,uint256,address,address,address[2])"(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    curvePickleJarToPrimitive_3(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "curvePickleJarToPrimitive_3(address,uint256,address,address,address[3])"(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    curvePickleJarToPrimitive_4(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string, string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "curvePickleJarToPrimitive_4(address,uint256,address,address,address[4])"(
      pickleJar: string,
      amount: BigNumberish,
      curveLp: string,
      curve: string,
      underlying: [string, string, string, string],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyERC20Retrieve(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "emergencyERC20Retrieve(address)"(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pickleJarToPrimitive(
      jar: string,
      amount: BigNumberish,
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pickleJarToPrimitive(address,uint256,address)"(
      jar: string,
      amount: BigNumberish,
      underlying: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    primitiveToCurvePickleJar_2(
      curve: string,
      underlying: [string, string],
      underlyingAmounts: [BigNumberish, BigNumberish],
      curveLp: string,
      pickleJar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "primitiveToCurvePickleJar_2(address,address[2],uint256[2],address,address)"(
      curve: string,
      underlying: [string, string],
      underlyingAmounts: [BigNumberish, BigNumberish],
      curveLp: string,
      pickleJar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    primitiveToCurvePickleJar_3(
      curve: string,
      underlying: [string, string, string],
      underlyingAmounts: [BigNumberish, BigNumberish, BigNumberish],
      curveLp: string,
      pickleJar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "primitiveToCurvePickleJar_3(address,address[3],uint256[3],address,address)"(
      curve: string,
      underlying: [string, string, string],
      underlyingAmounts: [BigNumberish, BigNumberish, BigNumberish],
      curveLp: string,
      pickleJar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    primitiveToCurvePickleJar_4(
      curve: string,
      underlying: [string, string, string, string],
      underlyingAmounts: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      curveLp: string,
      pickleJar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "primitiveToCurvePickleJar_4(address,address[4],uint256[4],address,address)"(
      curve: string,
      underlying: [string, string, string, string],
      underlyingAmounts: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      curveLp: string,
      pickleJar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    primitiveToPickleJar(
      underlying: string,
      amount: BigNumberish,
      jar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "primitiveToPickleJar(address,uint256,address)"(
      underlying: string,
      amount: BigNumberish,
      jar: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
