/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LooksStakingInterface extends ethers.utils.Interface {
  functions: {
    "PRECISION_FACTOR()": FunctionFragment;
    "calculatePendingRewards(address)": FunctionFragment;
    "calculateSharePriceInLOOKS()": FunctionFragment;
    "calculateSharesValueInLOOKS(address)": FunctionFragment;
    "currentRewardPerBlock()": FunctionFragment;
    "deposit(uint256,bool)": FunctionFragment;
    "harvest()": FunctionFragment;
    "lastRewardAdjustment()": FunctionFragment;
    "lastRewardBlock()": FunctionFragment;
    "lastUpdateBlock()": FunctionFragment;
    "looksRareToken()": FunctionFragment;
    "owner()": FunctionFragment;
    "periodEndBlock()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardPerTokenStored()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "tokenDistributor()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateRewards(uint256,uint256)": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "withdraw(uint256,bool)": FunctionFragment;
    "withdrawAll(bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "PRECISION_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePendingRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSharePriceInLOOKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSharesValueInLOOKS",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRewardPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastRewardAdjustment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "looksRareToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodEndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewards",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "PRECISION_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSharePriceInLOOKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSharesValueInLOOKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "looksRareToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "Harvest(address,uint256)": EventFragment;
    "NewRewardPeriod(uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRewardPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class LooksStaking extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LooksStakingInterface;

  functions: {
    PRECISION_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    "PRECISION_FACTOR()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculatePendingRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculatePendingRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSharePriceInLOOKS(overrides?: CallOverrides): Promise<[BigNumber]>;

    "calculateSharePriceInLOOKS()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateSharesValueInLOOKS(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "calculateSharesValueInLOOKS(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentRewardPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentRewardPerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      amount: BigNumberish,
      claimRewardToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,bool)"(
      amount: BigNumberish,
      claimRewardToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastRewardAdjustment(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastRewardAdjustment()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastRewardBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastRewardBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdateBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastUpdateBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    looksRareToken(overrides?: CallOverrides): Promise<[string]>;

    "looksRareToken()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    periodEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "periodEndBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    "rewardPerTokenStored()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    "rewardToken()"(overrides?: CallOverrides): Promise<[string]>;

    tokenDistributor(overrides?: CallOverrides): Promise<[string]>;

    "tokenDistributor()"(overrides?: CallOverrides): Promise<[string]>;

    totalShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalShares()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRewards(
      reward: BigNumberish,
      rewardDurationInBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateRewards(uint256,uint256)"(
      reward: BigNumberish,
      rewardDurationInBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        userRewardPerTokenPaid: BigNumber;
        rewards: BigNumber;
      }
    >;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        userRewardPerTokenPaid: BigNumber;
        rewards: BigNumber;
      }
    >;

    withdraw(
      shares: BigNumberish,
      claimRewardToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256,bool)"(
      shares: BigNumberish,
      claimRewardToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      claimRewardToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawAll(bool)"(
      claimRewardToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  PRECISION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  "PRECISION_FACTOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  calculatePendingRewards(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculatePendingRewards(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateSharePriceInLOOKS(overrides?: CallOverrides): Promise<BigNumber>;

  "calculateSharePriceInLOOKS()"(overrides?: CallOverrides): Promise<BigNumber>;

  calculateSharesValueInLOOKS(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calculateSharesValueInLOOKS(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentRewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "currentRewardPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amount: BigNumberish,
    claimRewardToken: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,bool)"(
    amount: BigNumberish,
    claimRewardToken: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvest()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastRewardAdjustment(overrides?: CallOverrides): Promise<BigNumber>;

  "lastRewardAdjustment()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "lastRewardBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdateBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "lastUpdateBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  looksRareToken(overrides?: CallOverrides): Promise<string>;

  "looksRareToken()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  periodEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "periodEndBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardPerTokenStored()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  "rewardToken()"(overrides?: CallOverrides): Promise<string>;

  tokenDistributor(overrides?: CallOverrides): Promise<string>;

  "tokenDistributor()"(overrides?: CallOverrides): Promise<string>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRewards(
    reward: BigNumberish,
    rewardDurationInBlocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateRewards(uint256,uint256)"(
    reward: BigNumberish,
    rewardDurationInBlocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      shares: BigNumber;
      userRewardPerTokenPaid: BigNumber;
      rewards: BigNumber;
    }
  >;

  "userInfo(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      shares: BigNumber;
      userRewardPerTokenPaid: BigNumber;
      rewards: BigNumber;
    }
  >;

  withdraw(
    shares: BigNumberish,
    claimRewardToken: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256,bool)"(
    shares: BigNumberish,
    claimRewardToken: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    claimRewardToken: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawAll(bool)"(
    claimRewardToken: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PRECISION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    "PRECISION_FACTOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePendingRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculatePendingRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSharePriceInLOOKS(overrides?: CallOverrides): Promise<BigNumber>;

    "calculateSharePriceInLOOKS()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSharesValueInLOOKS(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSharesValueInLOOKS(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "currentRewardPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      claimRewardToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,bool)"(
      amount: BigNumberish,
      claimRewardToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    harvest(overrides?: CallOverrides): Promise<void>;

    "harvest()"(overrides?: CallOverrides): Promise<void>;

    lastRewardAdjustment(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRewardAdjustment()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRewardBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    looksRareToken(overrides?: CallOverrides): Promise<string>;

    "looksRareToken()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    periodEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "periodEndBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerTokenStored()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    "rewardToken()"(overrides?: CallOverrides): Promise<string>;

    tokenDistributor(overrides?: CallOverrides): Promise<string>;

    "tokenDistributor()"(overrides?: CallOverrides): Promise<string>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewards(
      reward: BigNumberish,
      rewardDurationInBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateRewards(uint256,uint256)"(
      reward: BigNumberish,
      rewardDurationInBlocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        userRewardPerTokenPaid: BigNumber;
        rewards: BigNumber;
      }
    >;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        shares: BigNumber;
        userRewardPerTokenPaid: BigNumber;
        rewards: BigNumber;
      }
    >;

    withdraw(
      shares: BigNumberish,
      claimRewardToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,bool)"(
      shares: BigNumberish,
      claimRewardToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(
      claimRewardToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawAll(bool)"(
      claimRewardToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposit(
      user: string | null,
      amount: null,
      harvestedAmount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; amount: BigNumber; harvestedAmount: BigNumber }
    >;

    Harvest(
      user: string | null,
      harvestedAmount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; harvestedAmount: BigNumber }
    >;

    NewRewardPeriod(
      numberBlocks: null,
      rewardPerBlock: null,
      reward: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { numberBlocks: BigNumber; rewardPerBlock: BigNumber; reward: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Withdraw(
      user: string | null,
      amount: null,
      harvestedAmount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; amount: BigNumber; harvestedAmount: BigNumber }
    >;
  };

  estimateGas: {
    PRECISION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    "PRECISION_FACTOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePendingRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculatePendingRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSharePriceInLOOKS(overrides?: CallOverrides): Promise<BigNumber>;

    "calculateSharePriceInLOOKS()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateSharesValueInLOOKS(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateSharesValueInLOOKS(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRewardPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "currentRewardPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      claimRewardToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,bool)"(
      amount: BigNumberish,
      claimRewardToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastRewardAdjustment(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRewardAdjustment()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastRewardBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    looksRareToken(overrides?: CallOverrides): Promise<BigNumber>;

    "looksRareToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    periodEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "periodEndBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerTokenStored()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenDistributor()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRewards(
      reward: BigNumberish,
      rewardDurationInBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateRewards(uint256,uint256)"(
      reward: BigNumberish,
      rewardDurationInBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      shares: BigNumberish,
      claimRewardToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256,bool)"(
      shares: BigNumberish,
      claimRewardToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      claimRewardToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawAll(bool)"(
      claimRewardToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PRECISION_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PRECISION_FACTOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePendingRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculatePendingRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSharePriceInLOOKS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateSharePriceInLOOKS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateSharesValueInLOOKS(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateSharesValueInLOOKS(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRewardPerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "currentRewardPerBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      claimRewardToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,bool)"(
      amount: BigNumberish,
      claimRewardToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastRewardAdjustment(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastRewardAdjustment()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastRewardBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastRewardBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdateBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastUpdateBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    looksRareToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "looksRareToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodEndBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardPerTokenStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardPerTokenStored()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenDistributor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalShares()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRewards(
      reward: BigNumberish,
      rewardDurationInBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateRewards(uint256,uint256)"(
      reward: BigNumberish,
      rewardDurationInBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      shares: BigNumberish,
      claimRewardToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,bool)"(
      shares: BigNumberish,
      claimRewardToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      claimRewardToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawAll(bool)"(
      claimRewardToken: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
