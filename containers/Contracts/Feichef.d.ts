/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FeichefInterface extends ethers.utils.Interface {
  functions: {
    "CONTRACT_ADMIN_ROLE()": FunctionFragment;
    "SCALE_FACTOR()": FunctionFragment;
    "TRIBE()": FunctionFragment;
    "add(uint120,address,address,tuple[])": FunctionFragment;
    "core()": FunctionFragment;
    "deposit(uint256,uint256,uint64)": FunctionFragment;
    "depositInfo(uint256,address,uint256)": FunctionFragment;
    "emergencyWithdraw(uint256,address)": FunctionFragment;
    "fei()": FunctionFragment;
    "feiBalance()": FunctionFragment;
    "getTotalStakedInPool(uint256,address)": FunctionFragment;
    "governorAddPoolMultiplier(uint256,uint64,uint64)": FunctionFragment;
    "governorWithdrawTribe(uint256)": FunctionFragment;
    "harvest(uint256,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isContractAdmin(address)": FunctionFragment;
    "lockPool(uint256)": FunctionFragment;
    "massUpdatePools(uint256[])": FunctionFragment;
    "numPools()": FunctionFragment;
    "openUserDeposits(uint256,address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingRewards(uint256,address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "resetRewards(uint256)": FunctionFragment;
    "rewardMultipliers(uint256,uint128)": FunctionFragment;
    "rewarder(uint256)": FunctionFragment;
    "set(uint256,uint120,address,bool)": FunctionFragment;
    "setContractAdminRole(bytes32)": FunctionFragment;
    "setCore(address)": FunctionFragment;
    "stakedToken(uint256)": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "tribe()": FunctionFragment;
    "tribeBalance()": FunctionFragment;
    "tribePerBlock()": FunctionFragment;
    "unlockPool(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateBlockReward(uint256)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdrawAllAndHarvest(uint256,address)": FunctionFragment;
    "withdrawFromDeposit(uint256,uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CONTRACT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SCALE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "TRIBE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [
      BigNumberish,
      string,
      string,
      { lockLength: BigNumberish; rewardMultiplier: BigNumberish }[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositInfo",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "fei", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feiBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStakedInPool",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "governorAddPoolMultiplier",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governorWithdrawTribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isContractAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "numPools", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "openUserDeposits",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardMultipliers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewarder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [BigNumberish, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractAdminRole",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setCore", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakedToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tribe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tribeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tribePerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unlockPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateBlockReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllAndHarvest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromDeposit",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTRACT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SCALE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "TRIBE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fei", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feiBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStakedInPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governorAddPoolMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governorWithdrawTribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isContractAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openUserDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resetRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewarder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setContractAdminRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tribeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tribePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlockPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBlockReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllAndHarvest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromDeposit",
    data: BytesLike
  ): Result;

  events: {
    "ContractAdminRoleUpdate(bytes32,bytes32)": EventFragment;
    "CoreUpdate(address,address)": EventFragment;
    "Deposit(address,uint256,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256,address)": EventFragment;
    "Harvest(address,uint256,uint256)": EventFragment;
    "LogPoolAddition(uint256,uint256,address,address)": EventFragment;
    "LogPoolMultiplier(uint256,uint128,uint256)": EventFragment;
    "LogSetPool(uint256,uint256,address,bool)": EventFragment;
    "LogUpdatePool(uint256,uint128,uint256,uint256)": EventFragment;
    "NewTribePerBlock(uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "PoolLocked(bool,uint256)": EventFragment;
    "TribeWithdraw(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractAdminRoleUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CoreUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPoolAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogPoolMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUpdatePool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTribePerBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TribeWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class Feichef extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FeichefInterface;

  functions: {
    CONTRACT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "CONTRACT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    SCALE_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    "SCALE_FACTOR()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    TRIBE(overrides?: CallOverrides): Promise<[string]>;

    "TRIBE()"(overrides?: CallOverrides): Promise<[string]>;

    add(
      allocPoint: BigNumberish,
      _stakedToken: string,
      _rewarder: string,
      rewardData: {
        lockLength: BigNumberish;
        rewardMultiplier: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "add(uint120,address,address,tuple[])"(
      allocPoint: BigNumberish,
      _stakedToken: string,
      _rewarder: string,
      rewardData: {
        lockLength: BigNumberish;
        rewardMultiplier: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    core(overrides?: CallOverrides): Promise<[string]>;

    "core()"(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      lockLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256,uint64)"(
      pid: BigNumberish,
      amount: BigNumberish,
      lockLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositInfo(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        unlockBlock: BigNumber;
        multiplier: BigNumber;
      }
    >;

    "depositInfo(uint256,address,uint256)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        unlockBlock: BigNumber;
        multiplier: BigNumber;
      }
    >;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fei(overrides?: CallOverrides): Promise<[string]>;

    "fei()"(overrides?: CallOverrides): Promise<[string]>;

    feiBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "feiBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalStakedInPool(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTotalStakedInPool(uint256,address)"(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    governorAddPoolMultiplier(
      _pid: BigNumberish,
      lockLength: BigNumberish,
      newRewardsMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "governorAddPoolMultiplier(uint256,uint64,uint64)"(
      _pid: BigNumberish,
      lockLength: BigNumberish,
      newRewardsMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governorWithdrawTribe(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "governorWithdrawTribe(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    harvest(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "harvest(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _core: string,
      _tribe: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _core: string,
      _tribe: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isContractAdmin(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isContractAdmin(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockPool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockPool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numPools(overrides?: CallOverrides): Promise<[BigNumber]>;

    "numPools()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    openUserDeposits(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "openUserDeposits(uint256,address)"(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    pendingRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "pendingRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        virtualTotalSupply: BigNumber;
        accTribePerShare: BigNumber;
        lastRewardBlock: BigNumber;
        allocPoint: BigNumber;
        unlocked: boolean;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        virtualTotalSupply: BigNumber;
        accTribePerShare: BigNumber;
        lastRewardBlock: BigNumber;
        allocPoint: BigNumber;
        unlocked: boolean;
      }
    >;

    resetRewards(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "resetRewards(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardMultipliers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rewardMultipliers(uint256,uint128)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewarder(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "rewarder(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "set(uint256,uint120,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setContractAdminRole(
      newContractAdminRole: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setContractAdminRole(bytes32)"(
      newContractAdminRole: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCore(
      newCore: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCore(address)"(
      newCore: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "stakedToken(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tribe(overrides?: CallOverrides): Promise<[string]>;

    "tribe()"(overrides?: CallOverrides): Promise<[string]>;

    tribeBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tribeBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tribePerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tribePerBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    unlockPool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unlockPool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBlockReward(
      newBlockReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateBlockReward(uint256)"(
      newBlockReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        rewardDebt: BigNumber;
        virtualAmount: BigNumber;
      }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        rewardDebt: BigNumber;
        virtualAmount: BigNumber;
      }
    >;

    withdrawAllAndHarvest(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawAllAndHarvest(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFromDeposit(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawFromDeposit(uint256,uint256,address,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CONTRACT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "CONTRACT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  SCALE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  "SCALE_FACTOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  TRIBE(overrides?: CallOverrides): Promise<string>;

  "TRIBE()"(overrides?: CallOverrides): Promise<string>;

  add(
    allocPoint: BigNumberish,
    _stakedToken: string,
    _rewarder: string,
    rewardData: { lockLength: BigNumberish; rewardMultiplier: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "add(uint120,address,address,tuple[])"(
    allocPoint: BigNumberish,
    _stakedToken: string,
    _rewarder: string,
    rewardData: { lockLength: BigNumberish; rewardMultiplier: BigNumberish }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  core(overrides?: CallOverrides): Promise<string>;

  "core()"(overrides?: CallOverrides): Promise<string>;

  deposit(
    pid: BigNumberish,
    amount: BigNumberish,
    lockLength: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256,uint64)"(
    pid: BigNumberish,
    amount: BigNumberish,
    lockLength: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositInfo(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      unlockBlock: BigNumber;
      multiplier: BigNumber;
    }
  >;

  "depositInfo(uint256,address,uint256)"(
    arg0: BigNumberish,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      unlockBlock: BigNumber;
      multiplier: BigNumber;
    }
  >;

  emergencyWithdraw(
    pid: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256,address)"(
    pid: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fei(overrides?: CallOverrides): Promise<string>;

  "fei()"(overrides?: CallOverrides): Promise<string>;

  feiBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "feiBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalStakedInPool(
    pid: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTotalStakedInPool(uint256,address)"(
    pid: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  governorAddPoolMultiplier(
    _pid: BigNumberish,
    lockLength: BigNumberish,
    newRewardsMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "governorAddPoolMultiplier(uint256,uint64,uint64)"(
    _pid: BigNumberish,
    lockLength: BigNumberish,
    newRewardsMultiplier: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governorWithdrawTribe(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "governorWithdrawTribe(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  harvest(
    pid: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "harvest(uint256,address)"(
    pid: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _core: string,
    _tribe: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _core: string,
    _tribe: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isContractAdmin(_admin: string, overrides?: CallOverrides): Promise<boolean>;

  "isContractAdmin(address)"(
    _admin: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockPool(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockPool(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  massUpdatePools(
    pids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "massUpdatePools(uint256[])"(
    pids: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numPools(overrides?: CallOverrides): Promise<BigNumber>;

  "numPools()"(overrides?: CallOverrides): Promise<BigNumber>;

  openUserDeposits(
    pid: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "openUserDeposits(uint256,address)"(
    pid: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pendingRewards(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "pendingRewards(uint256,address)"(
    _pid: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      virtualTotalSupply: BigNumber;
      accTribePerShare: BigNumber;
      lastRewardBlock: BigNumber;
      allocPoint: BigNumber;
      unlocked: boolean;
    }
  >;

  "poolInfo(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      virtualTotalSupply: BigNumber;
      accTribePerShare: BigNumber;
      lastRewardBlock: BigNumber;
      allocPoint: BigNumber;
      unlocked: boolean;
    }
  >;

  resetRewards(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "resetRewards(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardMultipliers(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rewardMultipliers(uint256,uint128)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewarder(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "rewarder(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  set(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _rewarder: string,
    overwrite: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "set(uint256,uint120,address,bool)"(
    _pid: BigNumberish,
    _allocPoint: BigNumberish,
    _rewarder: string,
    overwrite: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setContractAdminRole(
    newContractAdminRole: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setContractAdminRole(bytes32)"(
    newContractAdminRole: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCore(
    newCore: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCore(address)"(
    newCore: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "stakedToken(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

  tribe(overrides?: CallOverrides): Promise<string>;

  "tribe()"(overrides?: CallOverrides): Promise<string>;

  tribeBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "tribeBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  tribePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "tribePerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  unlockPool(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unlockPool(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unpause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBlockReward(
    newBlockReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateBlockReward(uint256)"(
    newBlockReward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updatePool(uint256)"(
    pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { rewardDebt: BigNumber; virtualAmount: BigNumber }
  >;

  "userInfo(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { rewardDebt: BigNumber; virtualAmount: BigNumber }
  >;

  withdrawAllAndHarvest(
    pid: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawAllAndHarvest(uint256,address)"(
    pid: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFromDeposit(
    pid: BigNumberish,
    amount: BigNumberish,
    to: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawFromDeposit(uint256,uint256,address,uint256)"(
    pid: BigNumberish,
    amount: BigNumberish,
    to: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CONTRACT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "CONTRACT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    SCALE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    "SCALE_FACTOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    TRIBE(overrides?: CallOverrides): Promise<string>;

    "TRIBE()"(overrides?: CallOverrides): Promise<string>;

    add(
      allocPoint: BigNumberish,
      _stakedToken: string,
      _rewarder: string,
      rewardData: {
        lockLength: BigNumberish;
        rewardMultiplier: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "add(uint120,address,address,tuple[])"(
      allocPoint: BigNumberish,
      _stakedToken: string,
      _rewarder: string,
      rewardData: {
        lockLength: BigNumberish;
        rewardMultiplier: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    core(overrides?: CallOverrides): Promise<string>;

    "core()"(overrides?: CallOverrides): Promise<string>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      lockLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256,uint64)"(
      pid: BigNumberish,
      amount: BigNumberish,
      lockLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositInfo(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        unlockBlock: BigNumber;
        multiplier: BigNumber;
      }
    >;

    "depositInfo(uint256,address,uint256)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        unlockBlock: BigNumber;
        multiplier: BigNumber;
      }
    >;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fei(overrides?: CallOverrides): Promise<string>;

    "fei()"(overrides?: CallOverrides): Promise<string>;

    feiBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "feiBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalStakedInPool(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalStakedInPool(uint256,address)"(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governorAddPoolMultiplier(
      _pid: BigNumberish,
      lockLength: BigNumberish,
      newRewardsMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "governorAddPoolMultiplier(uint256,uint64,uint64)"(
      _pid: BigNumberish,
      lockLength: BigNumberish,
      newRewardsMultiplier: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    governorWithdrawTribe(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "governorWithdrawTribe(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    harvest(
      pid: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "harvest(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _core: string,
      _tribe: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _core: string,
      _tribe: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isContractAdmin(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isContractAdmin(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockPool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "lockPool(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    numPools(overrides?: CallOverrides): Promise<BigNumber>;

    "numPools()"(overrides?: CallOverrides): Promise<BigNumber>;

    openUserDeposits(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openUserDeposits(uint256,address)"(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pendingRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        virtualTotalSupply: BigNumber;
        accTribePerShare: BigNumber;
        lastRewardBlock: BigNumber;
        allocPoint: BigNumber;
        unlocked: boolean;
      }
    >;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        virtualTotalSupply: BigNumber;
        accTribePerShare: BigNumber;
        lastRewardBlock: BigNumber;
        allocPoint: BigNumber;
        unlocked: boolean;
      }
    >;

    resetRewards(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "resetRewards(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardMultipliers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardMultipliers(uint256,uint128)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewarder(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "rewarder(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "set(uint256,uint120,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setContractAdminRole(
      newContractAdminRole: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setContractAdminRole(bytes32)"(
      newContractAdminRole: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setCore(newCore: string, overrides?: CallOverrides): Promise<void>;

    "setCore(address)"(
      newCore: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedToken(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "stakedToken(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    tribe(overrides?: CallOverrides): Promise<string>;

    "tribe()"(overrides?: CallOverrides): Promise<string>;

    tribeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "tribeBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    tribePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "tribePerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlockPool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "unlockPool(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    updateBlockReward(
      newBlockReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateBlockReward(uint256)"(
      newBlockReward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        rewardDebt: BigNumber;
        virtualAmount: BigNumber;
      }
    >;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        rewardDebt: BigNumber;
        virtualAmount: BigNumber;
      }
    >;

    withdrawAllAndHarvest(
      pid: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawAllAndHarvest(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromDeposit(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawFromDeposit(uint256,uint256,address,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ContractAdminRoleUpdate(
      oldContractAdminRole: BytesLike | null,
      newContractAdminRole: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { oldContractAdminRole: string; newContractAdminRole: string }
    >;

    CoreUpdate(
      oldCore: string | null,
      newCore: string | null
    ): TypedEventFilter<[string, string], { oldCore: string; newCore: string }>;

    Deposit(
      user: string | null,
      pid: BigNumberish | null,
      amount: null,
      depositID: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber; depositID: BigNumber }
    >;

    EmergencyWithdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null,
      to: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      { user: string; pid: BigNumber; amount: BigNumber; to: string }
    >;

    Harvest(
      user: string | null,
      pid: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; pid: BigNumber; amount: BigNumber }
    >;

    LogPoolAddition(
      pid: BigNumberish | null,
      allocPoint: null,
      stakedToken: string | null,
      rewarder: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      {
        pid: BigNumber;
        allocPoint: BigNumber;
        stakedToken: string;
        rewarder: string;
      }
    >;

    LogPoolMultiplier(
      pid: BigNumberish | null,
      lockLength: BigNumberish | null,
      multiplier: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { pid: BigNumber; lockLength: BigNumber; multiplier: BigNumber }
    >;

    LogSetPool(
      pid: BigNumberish | null,
      allocPoint: null,
      rewarder: string | null,
      overwrite: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, boolean],
      {
        pid: BigNumber;
        allocPoint: BigNumber;
        rewarder: string;
        overwrite: boolean;
      }
    >;

    LogUpdatePool(
      pid: BigNumberish | null,
      lastRewardBlock: BigNumberish | null,
      lpSupply: null,
      accTribePerShare: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        pid: BigNumber;
        lastRewardBlock: BigNumber;
        lpSupply: BigNumber;
        accTribePerShare: BigNumber;
      }
    >;

    NewTribePerBlock(
      amount: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    Paused(account: null): TypedEventFilter<[string], { account: string }>;

    PoolLocked(
      locked: boolean | null,
      pid: BigNumberish | null
    ): TypedEventFilter<
      [boolean, BigNumber],
      { locked: boolean; pid: BigNumber }
    >;

    TribeWithdraw(
      amount: null
    ): TypedEventFilter<[BigNumber], { amount: BigNumber }>;

    Unpaused(account: null): TypedEventFilter<[string], { account: string }>;

    Withdraw(
      user: string | null,
      pid: BigNumberish | null,
      amount: null,
      to: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      { user: string; pid: BigNumber; amount: BigNumber; to: string }
    >;
  };

  estimateGas: {
    CONTRACT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "CONTRACT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SCALE_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    "SCALE_FACTOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    TRIBE(overrides?: CallOverrides): Promise<BigNumber>;

    "TRIBE()"(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      allocPoint: BigNumberish,
      _stakedToken: string,
      _rewarder: string,
      rewardData: {
        lockLength: BigNumberish;
        rewardMultiplier: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "add(uint120,address,address,tuple[])"(
      allocPoint: BigNumberish,
      _stakedToken: string,
      _rewarder: string,
      rewardData: {
        lockLength: BigNumberish;
        rewardMultiplier: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<BigNumber>;

    "core()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      lockLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deposit(uint256,uint256,uint64)"(
      pid: BigNumberish,
      amount: BigNumberish,
      lockLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositInfo(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "depositInfo(uint256,address,uint256)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fei(overrides?: CallOverrides): Promise<BigNumber>;

    "fei()"(overrides?: CallOverrides): Promise<BigNumber>;

    feiBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "feiBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalStakedInPool(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTotalStakedInPool(uint256,address)"(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governorAddPoolMultiplier(
      _pid: BigNumberish,
      lockLength: BigNumberish,
      newRewardsMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "governorAddPoolMultiplier(uint256,uint64,uint64)"(
      _pid: BigNumberish,
      lockLength: BigNumberish,
      newRewardsMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governorWithdrawTribe(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "governorWithdrawTribe(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    harvest(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "harvest(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _core: string,
      _tribe: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _core: string,
      _tribe: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isContractAdmin(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isContractAdmin(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockPool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockPool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numPools(overrides?: CallOverrides): Promise<BigNumber>;

    "numPools()"(overrides?: CallOverrides): Promise<BigNumber>;

    openUserDeposits(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openUserDeposits(uint256,address)"(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resetRewards(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "resetRewards(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardMultipliers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardMultipliers(uint256,uint128)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewarder(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "rewarder(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "set(uint256,uint120,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setContractAdminRole(
      newContractAdminRole: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setContractAdminRole(bytes32)"(
      newContractAdminRole: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCore(
      newCore: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCore(address)"(
      newCore: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakedToken(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAllocPoint()"(overrides?: CallOverrides): Promise<BigNumber>;

    tribe(overrides?: CallOverrides): Promise<BigNumber>;

    "tribe()"(overrides?: CallOverrides): Promise<BigNumber>;

    tribeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "tribeBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    tribePerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "tribePerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlockPool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unlockPool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBlockReward(
      newBlockReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateBlockReward(uint256)"(
      newBlockReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAllAndHarvest(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawAllAndHarvest(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFromDeposit(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawFromDeposit(uint256,uint256,address,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CONTRACT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SCALE_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SCALE_FACTOR()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRIBE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TRIBE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add(
      allocPoint: BigNumberish,
      _stakedToken: string,
      _rewarder: string,
      rewardData: {
        lockLength: BigNumberish;
        rewardMultiplier: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "add(uint120,address,address,tuple[])"(
      allocPoint: BigNumberish,
      _stakedToken: string,
      _rewarder: string,
      rewardData: {
        lockLength: BigNumberish;
        rewardMultiplier: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "core()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      lockLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256,uint64)"(
      pid: BigNumberish,
      amount: BigNumberish,
      lockLength: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositInfo(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "depositInfo(uint256,address,uint256)"(
      arg0: BigNumberish,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fei(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fei()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feiBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feiBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalStakedInPool(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalStakedInPool(uint256,address)"(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governorAddPoolMultiplier(
      _pid: BigNumberish,
      lockLength: BigNumberish,
      newRewardsMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "governorAddPoolMultiplier(uint256,uint64,uint64)"(
      _pid: BigNumberish,
      lockLength: BigNumberish,
      newRewardsMultiplier: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governorWithdrawTribe(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "governorWithdrawTribe(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    harvest(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "harvest(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _core: string,
      _tribe: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _core: string,
      _tribe: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isContractAdmin(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isContractAdmin(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockPool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockPool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    massUpdatePools(
      pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "massUpdatePools(uint256[])"(
      pids: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numPools()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openUserDeposits(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "openUserDeposits(uint256,address)"(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingRewards(uint256,address)"(
      _pid: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolInfo(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resetRewards(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "resetRewards(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardMultipliers(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardMultipliers(uint256,uint128)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewarder(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewarder(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "set(uint256,uint120,address,bool)"(
      _pid: BigNumberish,
      _allocPoint: BigNumberish,
      _rewarder: string,
      overwrite: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setContractAdminRole(
      newContractAdminRole: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setContractAdminRole(bytes32)"(
      newContractAdminRole: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCore(
      newCore: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCore(address)"(
      newCore: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedToken(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakedToken(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAllocPoint()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tribe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tribe()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tribeBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tribeBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tribePerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tribePerBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlockPool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unlockPool(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBlockReward(
      newBlockReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateBlockReward(uint256)"(
      newBlockReward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updatePool(uint256)"(
      pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userInfo(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawAllAndHarvest(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawAllAndHarvest(uint256,address)"(
      pid: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromDeposit(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFromDeposit(uint256,uint256,address,uint256)"(
      pid: BigNumberish,
      amount: BigNumberish,
      to: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
